import{_ as l,c as e,a3 as a,o as r}from"./chunks/framework.DDs3IadZ.js";const d=JSON.parse('{"title":"Prepare","description":"","frontmatter":{},"headers":[],"relativePath":"code/program/future/prepare.md","filePath":"code/program/future/prepare.md","lastUpdated":1716273280000}'),t={name:"code/program/future/prepare.md"};function o(n,i,s,c,h,p){return r(),e("div",null,i[0]||(i[0]=[a('<h1 id="prepare" tabindex="-1">Prepare <a class="header-anchor" href="#prepare" aria-label="Permalink to &quot;Prepare&quot;">​</a></h1><blockquote><p>What are you preparing to do</p></blockquote><ul><li>web service</li><li>数据结构 算法</li><li>操作系统</li></ul><blockquote><p>因此优先考虑使用组合而不是继承。</p></blockquote><h2 id="题库每日" tabindex="-1"><a href="./practice">题库每日</a> <a class="header-anchor" href="#题库每日" aria-label="Permalink to &quot;[题库每日](./practice)&quot;">​</a></h2><h2 id="hang-in-there" tabindex="-1">Hang in There <a class="header-anchor" href="#hang-in-there" aria-label="Permalink to &quot;Hang in There&quot;">​</a></h2><ul><li><a href="https://raw.githubusercontent.com/DrAugus/cpp/master/src/leetcode/700.cpp" target="_blank" rel="noreferrer">BST查找树中是否有指定元素</a></li><li><a href="https://raw.githubusercontent.com/DrAugus/cpp/master/src/leetcode/20.cpp" target="_blank" rel="noreferrer">括号匹配</a></li><li>十个桶的hash表，key%10，142存放在哪里</li><li>搜索排序的时间复杂度</li><li>合并有序/无序的两个数组时间复杂度</li><li>排序算法的稳定性</li><li>先序、中序、后序遍历</li><li>In a binary tree that has K nodes having two children and L leaves, show the relation between K and L</li><li>B-Trees are used commonly for ?</li><li>影响哈希表查找的效率有哪些</li><li>Big(O) notation</li><li>A Priority-Queue is implemented as a Max-Heap. 最小堆、最大堆的插入</li><li>双向链表什么时候比单链表效率更高</li></ul><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><ul><li><a href="./../../cpp/concept/#面向对象编程与面向过程编程的区别与联系">解释面向对象语言</a>，<a href="./../../cpp/c-cpp-diff">C和C++的区别</a></li><li>各种排序</li><li>数组中找重复值</li><li>Git常用命令、简单解释一下Git原理、怎么理解git是一个分布式系统</li><li>CI/CD的Job</li><li>zookeeper介绍一下 (从CAP 数据一致性等分布式问题出发 介绍了基本原理和应用场景)</li><li>主节点崩溃了, 集群会发生什么</li><li>讲一下HTTP协议,为什么说是无状态的, POST/GET请求的区别, 1.X 和 2.0区别</li><li><a href="./../distributed/paxos">paxos</a></li><li>举一个会出现StackOverflow错误的情况,并说说为什么(递归...)</li><li>如何处理网页的大量请求</li><li>如何处理并发造成的数据不一致问题，加锁，锁的类型有哪些</li><li>如何不采用加锁处理并发问题</li><li>如何查找一个同学的课程平均成绩并排序，每个同学选择的课程可能不一样，不使用冗余字段</li><li>如果课程成绩具有权重，如何设计表，如何进行平均成绩排序</li><li>如何设计一个OJ系统 就刚才设计的OJ系统，设计出对应数据库表的关系 如何处理高并发情况下，用户提交代码造成系统卡死问题</li><li>把1000个球放入10盒子后，保证给任意1——1000任意一个数n，能找到对应几个盒子中的个数的和sum等于n</li><li>访问一个网页的具体流程</li><li>解释LSTM</li><li>给定一个天平，一个2g的砝码和一个7g的砝码，以及若干盐，求如何在三次以内称到50g的盐</li><li>给定链表和整数k，链表的每k个数逆序，如链表为1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null, k=3,结果得到3-&gt;2-&gt;1-&gt;5-&gt;4-null( 编程界面没有像leetcod一样给出链表的结构定义和后台没有测试用例，需要自己写链表结构定义和测试过程，测试用例自己想)</li><li>给定一个有序的数组，和一个整数k，求数组里和为k的所有数对</li></ul><h2 id="c" tabindex="-1">C++ <a class="header-anchor" href="#c" aria-label="Permalink to &quot;C++&quot;">​</a></h2><ul><li>c++的基础知识</li><li>c++11特性</li><li><a href="./../../sys-design/design-pattern">设计模式</a>，单例、适配器模式</li><li>内存管理</li><li>C/C++的段错误是什么</li><li>写一个c++的类 实现一个string类，然后支持拷贝构造和移动构造和支持vector容器，用智能指针</li><li>多态</li><li>死锁</li></ul><h2 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h2><ul><li>递归二叉树</li><li><a href="https://raw.githubusercontent.com/DrAugus/cpp/master/src/leetcode/20.cpp" target="_blank" rel="noreferrer">括号匹配</a></li><li>树状数组</li><li>图表设计合理性</li><li>反转链表</li><li>堆的插入删除具体过程</li><li>图算法（最短路、最小生成树）</li><li>跳表、数组链表的优缺点</li><li>一道dfs，一道dp，一道字符串处理，写完了指着代码一个个问变量分别在jvm中的什么区域，引出提问jvm内存区域，垃圾回收算法. 然后dfs问了复杂度, dp问了最优子结构这些基本概念,字符串问了StringBuilder和StringBuffer的区别.</li><li>一维二分查找，手写代码</li><li>二维二分查找，讲解思路，计算时间复杂度，如何将时间复杂度将到O(n)</li><li>给出BST，然后给出number，返回number是否在BST</li><li>二叉树的按层求和，递归和迭代</li><li>给定数组，求两个数的最大差值，要求，大数在小数后面</li><li>HashMap和HashTable</li><li>ArrayList和Vector</li><li>GC</li><li>垃圾回收算法</li><li>编写代码求股票最大利润（假如一个数组中存储了一个股票，第i个元素表示第i天的股票价格，只允许一次买入和一次卖出，请提供一个算法，计算出通过卖出和买入可以得到的最大利润）</li></ul><h2 id="操作系统" tabindex="-1">操作系统 <a class="header-anchor" href="#操作系统" aria-label="Permalink to &quot;操作系统&quot;">​</a></h2><ul><li>为什么要分段分页</li><li>虚拟内存原理</li><li>银行家算法</li><li>进程和线程的区别</li></ul><h2 id="前端" tabindex="-1">前端 <a class="header-anchor" href="#前端" aria-label="Permalink to &quot;前端&quot;">​</a></h2><ul><li>跨域问题</li><li>TypeScript中Interface和Type的区别</li><li>TypeScript中的类型断言</li><li>事件捕获</li><li>事件冒泡</li><li>Async函数以及得到的返回值，如果Aysnc return new Promise那返回值是什么</li><li>let和const的区别，const常量为啥是不可以改变的</li><li>对this的理解，This在不同的情况下代表什么</li><li>浏览器缓存</li><li>Cookie，session，localStorage，sessionStorage的区别和使用场景</li><li>Css盒模型，如果Width是100，Border是1，padding是10，在浏览器上的width是多少（很简单的问题但是太久没看忘记了哈哈哈）</li><li>Relative和absolute的区别</li><li>React单向数据流</li><li>Hook在什么情况下不能使用，为什么</li><li>SetState为啥不能立即看到改变</li><li>React中的key有什么作用</li><li>非受控组件和受控组件</li><li>高阶组件</li><li>类组件和函数组件的区别</li></ul>',17)]))}const g=l(t,[["render",o]]);export{d as __pageData,g as default};
