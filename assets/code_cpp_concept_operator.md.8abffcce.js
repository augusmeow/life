import{_ as t,c as e,o as l,Q as d}from"./chunks/framework.1cc28bed.js";const h=JSON.parse('{"title":"运算符","description":"","frontmatter":{},"headers":[],"relativePath":"code/cpp/concept/operator.md","filePath":"code/cpp/concept/operator.md","lastUpdated":1697180748000}'),a={name:"code/cpp/concept/operator.md"},n=d('<h1 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h1><h2 id="assignment-operators" tabindex="-1">Assignment Operators <a class="header-anchor" href="#assignment-operators" aria-label="Permalink to &quot;Assignment Operators&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Operator</th><th style="text-align:left;">Example</th><th style="text-align:left;">Same As</th></tr></thead><tbody><tr><td style="text-align:left;"><code>=</code></td><td style="text-align:left;">x = 5</td><td style="text-align:left;">x = 5</td></tr><tr><td style="text-align:left;"><code>+=</code></td><td style="text-align:left;">x += 3</td><td style="text-align:left;">x = x + 3</td></tr><tr><td style="text-align:left;"><code>-=</code></td><td style="text-align:left;">x -= 3</td><td style="text-align:left;">x = x - 3</td></tr><tr><td style="text-align:left;"><code>*=</code></td><td style="text-align:left;">x *= 3</td><td style="text-align:left;">x = x * 3</td></tr><tr><td style="text-align:left;"><code>/=</code></td><td style="text-align:left;">x /= 3</td><td style="text-align:left;">x = x / 3</td></tr><tr><td style="text-align:left;"><code>%=</code></td><td style="text-align:left;">x %= 3</td><td style="text-align:left;">x = x % 3</td></tr><tr><td style="text-align:left;"><code>&amp;=</code></td><td style="text-align:left;">x &amp;= 3</td><td style="text-align:left;">x = x &amp; 3</td></tr><tr><td style="text-align:left;"><code>|=</code></td><td style="text-align:left;">x |= 3</td><td style="text-align:left;">x = x | 3</td></tr><tr><td style="text-align:left;"><code>^=</code></td><td style="text-align:left;">x ^= 3</td><td style="text-align:left;">x = x ^ 3</td></tr><tr><td style="text-align:left;"><code>&gt;&gt;=</code></td><td style="text-align:left;">x &gt;&gt;= 3</td><td style="text-align:left;">x = x &gt;&gt; 3</td></tr><tr><td style="text-align:left;"><code>&lt;&lt;=</code></td><td style="text-align:left;">x &lt;&lt;= 3</td><td style="text-align:left;">x = x &lt;&lt; 3</td></tr></tbody></table><h2 id="位运算符" tabindex="-1">位运算符 <a class="header-anchor" href="#位运算符" aria-label="Permalink to &quot;位运算符&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">p</th><th style="text-align:center;">q</th><th style="text-align:center;"><code>p &amp; q</code></th><th style="text-align:center;"><code>~p</code></th><th style="text-align:center;"><code>~q</code></th><th style="text-align:center;"><code>p ^ q</code></th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr></tbody></table><p><code>~</code> 取反运算符，按二进制位进行&quot;取反&quot;运算</p>',6),r=[n];function s(x,c,i,o,g,y){return l(),e("div",null,r)}const p=t(a,[["render",s]]);export{h as __pageData,p as default};
