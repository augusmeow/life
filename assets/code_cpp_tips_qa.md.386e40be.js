import{_ as s,c as a,o as e,Q as n}from"./chunks/framework.1cc28bed.js";const h=JSON.parse('{"title":"遇到的问题速查","description":"","frontmatter":{},"headers":[],"relativePath":"code/cpp/tips/qa.md","filePath":"code/cpp/tips/qa.md","lastUpdated":1682241312000}'),o={name:"code/cpp/tips/qa.md"},p=n(`<h1 id="遇到的问题速查" tabindex="-1">遇到的问题速查 <a class="header-anchor" href="#遇到的问题速查" aria-label="Permalink to &quot;遇到的问题速查&quot;">​</a></h1><blockquote><p>代码过程遇到的一些问题速查表</p></blockquote><h2 id="version-glibcxx-3-4-29-not-found" tabindex="-1">version \`GLIBCXX_3.4.29&#39; not found <a class="header-anchor" href="#version-glibcxx-3-4-29-not-found" aria-label="Permalink to &quot;version \`GLIBCXX_3.4.29&#39; not found&quot;">​</a></h2><p>查看报错 libc 的情况</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">strings</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/your_path/libstdc++.so.6</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">GLIBC</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">strings</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/your_path/libstdc++.so.6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GLIBC</span></span></code></pre></div><p>发现确实没有 version \`GLIBCXX_3.4.29’</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">libstdc++.so.6</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">find</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">libstdc++.so.6</span></span></code></pre></div><p>在找到的列表里，逐个寻找 <code>GLIBCXX_3.4.29</code>，找到后，将此 <code>libstdc++.so.6</code> 替换到之前错误路径下</p><h2 id="os-error-code-4-interrupted-system-call" tabindex="-1">OS error code 4: Interrupted system call <a class="header-anchor" href="#os-error-code-4-interrupted-system-call" aria-label="Permalink to &quot;OS error code 4: Interrupted system call&quot;">​</a></h2><h2 id="error-invalid-storage-class-for-function" tabindex="-1">error: invalid storage class for function <a class="header-anchor" href="#error-invalid-storage-class-for-function" aria-label="Permalink to &quot;error: invalid storage class for function&quot;">​</a></h2><p>报错的函数的前面的那一个函数{}不配对</p><h2 id="地址消毒器" tabindex="-1">地址消毒器 <a class="header-anchor" href="#地址消毒器" aria-label="Permalink to &quot;地址消毒器&quot;">​</a></h2><p>为什么必须是下面这个顺序？暂时还不晓得</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">set_target_properties</span><span style="color:#E1E4E8;"> (app PROPERTIES </span><span style="color:#B392F0;">LINK_FLAGS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-fsanitize=address&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">set_target_properties</span><span style="color:#E1E4E8;"> (app PROPERTIES </span><span style="color:#B392F0;">LINK_FLAGS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-static&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">set_target_properties</span><span style="color:#E1E4E8;"> (app PROPERTIES </span><span style="color:#B392F0;">LINK_FLAGS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-lpthread&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">set_target_properties</span><span style="color:#24292E;"> (app PROPERTIES </span><span style="color:#6F42C1;">LINK_FLAGS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-fsanitize=address&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">set_target_properties</span><span style="color:#24292E;"> (app PROPERTIES </span><span style="color:#6F42C1;">LINK_FLAGS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-static&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">set_target_properties</span><span style="color:#24292E;"> (app PROPERTIES </span><span style="color:#6F42C1;">LINK_FLAGS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-lpthread&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>原本是这样的</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">set_target_properties</span><span style="color:#E1E4E8;"> (app PROPERTIES </span><span style="color:#B392F0;">LINK_FLAGS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-static&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">set_target_properties</span><span style="color:#E1E4E8;"> (app PROPERTIES </span><span style="color:#B392F0;">LINK_FLAGS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-lpthread&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">set_target_properties</span><span style="color:#E1E4E8;"> (app PROPERTIES </span><span style="color:#B392F0;">LINK_FLAGS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-fsanitize=address&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">set_target_properties</span><span style="color:#24292E;"> (app PROPERTIES </span><span style="color:#6F42C1;">LINK_FLAGS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-static&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">set_target_properties</span><span style="color:#24292E;"> (app PROPERTIES </span><span style="color:#6F42C1;">LINK_FLAGS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-lpthread&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">set_target_properties</span><span style="color:#24292E;"> (app PROPERTIES </span><span style="color:#6F42C1;">LINK_FLAGS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-fsanitize=address&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>抛出错误</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">undefined reference to symbol &#39;pthread_join@@GLIBC_2.0&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">//lib/i386-linux-gnu/libpthread.so.0: error adding symbols: DSO missing from command line</span></span>
<span class="line"><span style="color:#e1e4e8;">collect2: error: ld returned 1 exit status</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">undefined reference to symbol &#39;pthread_join@@GLIBC_2.0&#39;</span></span>
<span class="line"><span style="color:#24292e;">//lib/i386-linux-gnu/libpthread.so.0: error adding symbols: DSO missing from command line</span></span>
<span class="line"><span style="color:#24292e;">collect2: error: ld returned 1 exit status</span></span></code></pre></div><h2 id="segfault-at-11-ip-00007f24b21adcee-sp-00007fff7379ded0-error-4-in" tabindex="-1">segfault at 11 ip 00007f24b21adcee sp 00007fff7379ded0 error 4 in <a class="header-anchor" href="#segfault-at-11-ip-00007f24b21adcee-sp-00007fff7379ded0-error-4-in" aria-label="Permalink to &quot;segfault at 11 ip 00007f24b21adcee sp 00007fff7379ded0 error 4 in&quot;">​</a></h2><p><a href="https://stackoverflow.com/questions/2549214/interpreting-segfault-messages" target="_blank" rel="noreferrer">refer</a></p><p>run <code>addr2line -e yourSegfaultingProgram 00007f9bebcca90d</code></p><ul><li><code>address</code> (after the at) - the location in memory the code is trying to access (it&#39;s likely that 10 and 11 are offsets from a pointer we expect to be set to a valid value but which is instead pointing to 0)</li><li><code>ip</code> - instruction pointer, ie. where the code which is trying to do this lives</li><li><code>sp</code> - stack pointer</li><li><code>error</code> - An error code for page faults; see below for what this means on x86 (<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/include/asm/trap_pf.h?h=v5.16#n5" target="_blank" rel="noreferrer">link</a>).</li></ul><div class="language-h vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">h</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">/*</span></span>
<span class="line"><span style="color:#e1e4e8;"> * Page fault error code bits:</span></span>
<span class="line"><span style="color:#e1e4e8;"> *</span></span>
<span class="line"><span style="color:#e1e4e8;"> *   bit 0 ==    0: no page found       1: protection fault</span></span>
<span class="line"><span style="color:#e1e4e8;"> *   bit 1 ==    0: read access         1: write access</span></span>
<span class="line"><span style="color:#e1e4e8;"> *   bit 2 ==    0: kernel-mode access  1: user-mode access</span></span>
<span class="line"><span style="color:#e1e4e8;"> *   bit 3 ==                           1: use of reserved bit detected</span></span>
<span class="line"><span style="color:#e1e4e8;"> *   bit 4 ==                           1: fault was an instruction fetch</span></span>
<span class="line"><span style="color:#e1e4e8;"> *   bit 5 ==                           1: protection keys block access</span></span>
<span class="line"><span style="color:#e1e4e8;"> *   bit 15 ==                          1: SGX MMU page-fault</span></span>
<span class="line"><span style="color:#e1e4e8;"> */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/*</span></span>
<span class="line"><span style="color:#24292e;"> * Page fault error code bits:</span></span>
<span class="line"><span style="color:#24292e;"> *</span></span>
<span class="line"><span style="color:#24292e;"> *   bit 0 ==    0: no page found       1: protection fault</span></span>
<span class="line"><span style="color:#24292e;"> *   bit 1 ==    0: read access         1: write access</span></span>
<span class="line"><span style="color:#24292e;"> *   bit 2 ==    0: kernel-mode access  1: user-mode access</span></span>
<span class="line"><span style="color:#24292e;"> *   bit 3 ==                           1: use of reserved bit detected</span></span>
<span class="line"><span style="color:#24292e;"> *   bit 4 ==                           1: fault was an instruction fetch</span></span>
<span class="line"><span style="color:#24292e;"> *   bit 5 ==                           1: protection keys block access</span></span>
<span class="line"><span style="color:#24292e;"> *   bit 15 ==                          1: SGX MMU page-fault</span></span>
<span class="line"><span style="color:#24292e;"> */</span></span></code></pre></div>`,23),l=[p];function t(r,c,i,d,y,E){return e(),a("div",null,l)}const g=s(o,[["render",t]]);export{h as __pageData,g as default};
