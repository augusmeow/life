import{_ as s,c as a,o as l,Q as e}from"./chunks/framework.1cc28bed.js";const n="/life/img/code/notes/file-permissions-rwx.jpg",o="/life/img/code/notes/rwx-standard-unix-permission-bits.png",m=JSON.parse('{"title":"cmd","description":"","frontmatter":{},"headers":[],"relativePath":"computer/os/linux/command.md","filePath":"computer/os/linux/command.md","lastUpdated":1687248492000}'),t={name:"computer/os/linux/command.md"},p=e(`<h1 id="cmd" tabindex="-1">cmd <a class="header-anchor" href="#cmd" aria-label="Permalink to &quot;cmd&quot;">​</a></h1><p><a href="./sys_base_info">system base info</a></p><p><code>uname</code> <code>uname -a</code> <code>uname -m</code></p><h2 id="常用" tabindex="-1">常用 <a class="header-anchor" href="#常用" aria-label="Permalink to &quot;常用&quot;">​</a></h2><ul><li>显示文件夹大小<code>du -sh */</code> 其中，du是查看磁盘使用情况的命令；-s选项表示只显示总大小；-h选项表示以易读的方式显示文件夹大小，即以B、KB、MB等单位显示；*/表示只匹配目录名称，表示当前目录下所有子目录。</li><li><code>du -h --max-depth=1 | sort -h</code> 其中，--max-depth=1选项表示只显示当前目录下一级的目录和文件大小。sort命令用于排序。-h选项表示将大小以人类可读的方式排序，即以B、KB、MB等单位排序。默认情况下，sort命令按字典序排序。</li><li>显示磁盘占用情况 <code>df -h</code></li><li>查看端口占用情况 <code>sudo lsof -i :8888</code></li><li>只显示文件名 <code>ls -l | awk &#39;{print $9}&#39;</code></li></ul><h2 id="ls" tabindex="-1">ls <a class="header-anchor" href="#ls" aria-label="Permalink to &quot;ls&quot;">​</a></h2><p>list directory contents, 用于显示指定工作目录下之内容(列出目前工作目录所含之文件及子目录)。</p><p><code>ls [-alrtAFR] [name...]</code></p><ul><li><p>-a 显示所有文件及目录 (. 开头的隐藏文件也会列出)</p></li><li><p>-l 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</p></li><li><p>-r 将文件以相反次序显示(原定依英文字母次序)</p></li><li><p>-t 将文件依建立时间之先后次序列出</p></li><li><p>-A 同 -a ，但不列出 &quot;.&quot; (目前目录) 及 &quot;..&quot; (父目录)</p></li><li><p>-F 在列出的文件名称后加一符号；例如可执行档则加 &quot;*&quot;, 目录则加 &quot;/&quot;</p></li><li><p>-R 若目录下有文件，则以下之文件亦皆依序列出</p></li><li><p><code>ls -ll</code> 会显示成字节大小</p></li><li><p><code>ls- lh</code> 会以 KB、MB 等为单位进行显示，这样比较直观一些</p></li><li><p><code>ls -lt</code> 时间最近的在前面</p></li><li><p><code>ls -ltr</code> 时间从前到后</p></li></ul><h2 id="cut" tabindex="-1">cut <a class="header-anchor" href="#cut" aria-label="Permalink to &quot;cut&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cut</span><span style="color:#E1E4E8;"> [-bn] [file]</span></span>
<span class="line"><span style="color:#B392F0;">cut</span><span style="color:#E1E4E8;"> [-c] [file]</span></span>
<span class="line"><span style="color:#B392F0;">cut</span><span style="color:#E1E4E8;"> [-df] [file]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cut</span><span style="color:#24292E;"> [-bn] [file]</span></span>
<span class="line"><span style="color:#6F42C1;">cut</span><span style="color:#24292E;"> [-c] [file]</span></span>
<span class="line"><span style="color:#6F42C1;">cut</span><span style="color:#24292E;"> [-df] [file]</span></span></code></pre></div><p>cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。<br> 如果不指定 File 参数，cut 命令将读取标准输入。必须指定 <code>-b</code>、<code>-c</code> 或 <code>-f</code> 标志之一。</p><ul><li><code>-b</code> ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 <code>-n</code> 标志。</li><li><code>-c</code> ：以字符为单位进行分割。</li><li><code>-d</code> ：自定义分隔符，默认为制表符。</li><li><code>-f</code> ：与<code>-d</code>一起使用，指定显示哪个区域。</li><li><code>-n</code> ：取消分割多字节字符。仅和 <code>-b</code> 标志一起使用。如果字符的最后一个字节落在由 <code>-b</code> 标志的 List 参数指示的范围之内，该字符将被写出；否则，该字符将被排除</li></ul><h2 id="du" tabindex="-1">du <a class="header-anchor" href="#du" aria-label="Permalink to &quot;du&quot;">​</a></h2><blockquote><p>disk usage</p></blockquote><p><code>du [-abcDhHklmsSx][-L &lt;符号连接&gt;][-X &lt;文件&gt;][--block-size][--exclude=&lt;目录或文件&gt;][--max-depth=&lt;目录层数&gt;][--help][--version][目录或文件]</code> 参数说明</p><ul><li><code>-a</code>或<code>-all</code> 显示目录中个别文件的大小。</li><li><code>-b</code>或<code>-bytes</code> 显示目录或文件大小时，以byte为单位。</li><li><code>-c</code>或<code>--total</code> 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。</li><li><code>-D</code>或<code>--dereference-args</code> 显示指定符号连接的源文件大小。</li><li><code>-h</code>或<code>--human-readable</code> 以K，M，G为单位，提高信息的可读性。</li><li><code>-H</code>或<code>--si</code>与-h参数相同，但是K，M，G是以1000为换算单位。</li><li><code>-k</code>或<code>--kilobytes</code>以1024 bytes为单位。</li><li><code>-l</code>或<code>--count-links</code>重复计算硬件连接的文件。</li><li><code>-L&lt;符号连接&gt;</code>或<code>--dereference&lt;符号连接&gt;</code>显示选项中所指定符号连接的源文件大小。</li><li><code>-m</code>或<code>--megabytes</code>以1MB为单位。</li><li><code>-s</code>或<code>--summarize</code>仅显示总计。</li><li><code>-S</code>或<code>--separate-dirs</code>显示个别目录的大小时，并不含其子目录的大小。</li><li><code>-x</code>或<code>--one-file-xystem</code>以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</li><li><code>-X&lt;文件&gt;</code>或<code>--exclude-from=&lt;文件&gt;</code>在&lt;文件&gt;指定目录或文件。</li><li><code>--exclude=&lt;目录或文件&gt;</code> 略过指定的目录或文件。</li><li><code>--max-depth=&lt;目录层数&gt;</code> 超过指定层数的目录后，予以忽略。</li><li><code>--help</code> 显示帮助。</li><li><code>--version</code> 显示版本信息。</li></ul><p><code>du -sh</code> 显示总计</p><h2 id="ps" tabindex="-1">ps <a class="header-anchor" href="#ps" aria-label="Permalink to &quot;ps&quot;">​</a></h2><p><code>ps [options] [--help]</code></p><p><code>ps</code> 的参数非常多, 在此仅列出几个常用的参数并大略介绍含义</p><ul><li><code>-A</code> 列出所有的进程</li><li><code>-w</code> 显示加宽可以显示较多的资讯</li><li><code>-au</code> 显示较详细的资讯</li><li><code>-aux</code> 显示所有包含其他使用者的进程</li></ul><p>au(x) 输出格式</p><table><thead><tr><th>USER</th><th>PID</th><th>%CPU</th><th>%MEM</th><th>VSZ</th><th>RSS</th><th>TTY</th><th>STAT</th><th>START</th><th>TIME</th><th>COMMAND\`</th></tr></thead><tbody><tr><td>行程拥有者</td><td>pid</td><td>-</td><td>-</td><td>占用的虚拟记忆体大小</td><td>占用的记忆体大小</td><td>终端的次要装置号码 (minor device number of tty)</td><td>该行程的状态</td><td>行程开始时间</td><td>执行的时间</td><td>所执行的指令</td></tr></tbody></table><h2 id="w" tabindex="-1">w <a class="header-anchor" href="#w" aria-label="Permalink to &quot;w&quot;">​</a></h2><p>查看当前用户名、实际SSH连接的终端数量</p><h2 id="cp" tabindex="-1">cp <a class="header-anchor" href="#cp" aria-label="Permalink to &quot;cp&quot;">​</a></h2><p><code>cp -frap from_folder/* dist_folder</code></p><ul><li>-f 强制覆盖，不询问yes/no（-i的默认的，即默认为交互模式，询问是否覆盖）</li><li>-r 递归复制，包含目录</li><li>-a 做一个备份，这里可以不用这个参数，我们可以先备份整个test目录</li><li>-p 保持新文件的属性不变</li></ul><h2 id="date" tabindex="-1">date <a class="header-anchor" href="#date" aria-label="Permalink to &quot;date&quot;">​</a></h2><p>重命名文件，cp副本+\`date +%F\`</p><blockquote><p>其他命令参考<a href="https://www.runoob.com/linux/linux-comm-date.html" target="_blank" rel="noreferrer">runoob date</a></p></blockquote><h2 id="ln" tabindex="-1">ln <a class="header-anchor" href="#ln" aria-label="Permalink to &quot;ln&quot;">​</a></h2><p>建立软连接 <code>ln -s lib lib.so</code></p><h2 id="chmod" tabindex="-1">chmod <a class="header-anchor" href="#chmod" aria-label="Permalink to &quot;chmod&quot;">​</a></h2><p>Linux chmod（英文全拼：change mode）命令是控制用户对文件的权限的命令 Linux/Unix 的文件调用权限分为三级 : 文件所有者（Owner）、用户组（Group）、其它用户（Other Users）。</p><p><img src="`+n+'" alt="1"><img src="'+o+`" alt="1"></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">chmod</span><span style="color:#E1E4E8;"> [-cfvR] [--help] [--version] mode file...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">chmod</span><span style="color:#24292E;"> [-cfvR] [--help] [--version] mode file...</span></span></code></pre></div><p>mode 权限设定字串，格式如下</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[ugoa...][[+-</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">][rwxX]...][,...]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[ugoa...][[+-</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">][rwxX]...][,...]</span></span></code></pre></div><ul><li><code>u</code> 表示该文件的拥有者，<code>g</code> 表示与该文件的拥有者属于同一个群体(group)者，<code>o</code> 表示其他以外的人，<code>a</code> 表示这三者皆是。</li><li><code>+</code> 表示增加权限、<code>-</code> 表示取消权限、<code>=</code> 表示唯一设定权限。</li><li><code>r</code> 表示可读取，<code>w</code> 表示可写入，<code>x</code> 表示可执行，<code>X</code> 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</li></ul><p>其他</p><ul><li><code>-c</code> : 若该文件权限确实已经更改，才显示其更改动作</li><li><code>-f</code> : 若该文件权限无法被更改也不要显示错误讯息</li><li><code>-v</code> : 显示权限变更的详细资料</li><li><code>-R</code> : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递归的方式逐个变更)</li><li><code>--help</code> : 显示辅助说明</li><li><code>--version</code> : 显示版本</li></ul><p>使用八进制</p><table><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">权限</th><th style="text-align:left;">rwx</th><th style="text-align:left;">二进制</th></tr></thead><tbody><tr><td style="text-align:left;">7</td><td style="text-align:left;">读 + 写 + 执行</td><td style="text-align:left;">rwx</td><td style="text-align:left;">111</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">读 + 写</td><td style="text-align:left;">rw-</td><td style="text-align:left;">110</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">读 + 执行</td><td style="text-align:left;">r-x</td><td style="text-align:left;">101</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">只读</td><td style="text-align:left;">r--</td><td style="text-align:left;">100</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">写 + 执行</td><td style="text-align:left;">-wx</td><td style="text-align:left;">011</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">只写</td><td style="text-align:left;">-w-</td><td style="text-align:left;">010</td></tr><tr><td style="text-align:left;">1</td><td style="text-align:left;">只执行</td><td style="text-align:left;">--x</td><td style="text-align:left;">001</td></tr><tr><td style="text-align:left;">0</td><td style="text-align:left;">无</td><td style="text-align:left;">---</td><td style="text-align:left;">000</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>chmod a+r file</code></td><td style="text-align:left;">给file的所有用户增加读权限</td></tr><tr><td style="text-align:left;"><code>chmod a-x file</code></td><td style="text-align:left;">删除file的所有用户的执行权限</td></tr><tr><td style="text-align:left;"><code>chmod a+rw file</code></td><td style="text-align:left;">给file的所有用户增加读写权限</td></tr><tr><td style="text-align:left;"><code>chmod +rwx file</code></td><td style="text-align:left;">给file的所有用户增加读写执行权限</td></tr><tr><td style="text-align:left;"><code>chmod u=rw,go= file</code></td><td style="text-align:left;">对file的所有者设置读写权限，清空该用户组和其他用户对file的所有权限（空格代表无权限）</td></tr><tr><td style="text-align:left;"><code>chmod -R u+r,go-r docs</code></td><td style="text-align:left;">对目录docs和其子目录层次结构中的所有文件给用户增加读权限，而对用户组和其他用户删除读权限</td></tr><tr><td style="text-align:left;"><code>chmod 664 file</code></td><td style="text-align:left;">对file的所有者和用户组设置读写权限, 为其其他用户设置读权限</td></tr><tr><td style="text-align:left;"><code>chmod 0755 file</code></td><td style="text-align:left;">相当于u=rwx (4+2+1),go=rx (4+1 &amp; 4+1)。0 没有特殊模式。</td></tr><tr><td style="text-align:left;"><code>chmod 4755 file</code></td><td style="text-align:left;">4设置了设置用户ID位，剩下的相当于 u=rwx (4+2+1),go=rx (4+1 &amp; 4+1)。</td></tr><tr><td style="text-align:left;"><code>find path/ -type d -exec chmod a-x {} \\;</code></td><td style="text-align:left;">删除可执行权限对path/以及其所有的目录（不包括文件）的所有用户，使用&#39;-type f&#39;匹配文件</td></tr><tr><td style="text-align:left;"><code>find path/ -type d -exec chmod a+x {} \\;</code></td><td style="text-align:left;">允许所有用户浏览或通过目录path/</td></tr></tbody></table><p><code>chmod +x lib.so</code></p><h2 id="kill" tabindex="-1">kill <a class="header-anchor" href="#kill" aria-label="Permalink to &quot;kill&quot;">​</a></h2><p><code>killall -9 pid</code></p><h2 id="tar" tabindex="-1">tar <a class="header-anchor" href="#tar" aria-label="Permalink to &quot;tar&quot;">​</a></h2><ul><li>zip <code>tar -zcvf zip.tar.gz zip/</code></li><li>unzip <code>tar -zxvf zip.tar.gz</code></li><li>unzip .tar.bz2 <code>tar -jxvf zip.tar.bz2</code></li><li>unzip .tat.xz <code>tar -xvf zip.tar.xz</code></li></ul><h2 id="pidof" tabindex="-1">pidof <a class="header-anchor" href="#pidof" aria-label="Permalink to &quot;pidof&quot;">​</a></h2><p><code>pidof + pid</code></p><h2 id="tcpdump" tabindex="-1">tcpdump <a class="header-anchor" href="#tcpdump" aria-label="Permalink to &quot;tcpdump&quot;">​</a></h2><p><code>tcpdump -i admin port 1433 or port 3306 -vvv -w /home/clog/name.pcap</code></p><h2 id="chown" tabindex="-1">chown <a class="header-anchor" href="#chown" aria-label="Permalink to &quot;chown&quot;">​</a></h2><p>Linux chown（英文全拼：change owner）命令用于设置文件所有者和文件关联组的命令。 chown 需要超级用户 root 的权限才能执行此命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">chown</span><span style="color:#E1E4E8;"> [-cfhvR] [--help] [--version] user[:group] file...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">chown</span><span style="color:#24292E;"> [-cfhvR] [--help] [--version] user[:group] file...</span></span></code></pre></div><ul><li>user : 新的文件拥有者的使用者 ID</li><li>group : 新的文件拥有者的使用者组(group)</li><li>-c : 显示更改的部分的信息</li><li>-f : 忽略错误信息</li><li>-h : 修复符号链接</li><li>-v : 显示详细的处理信息</li><li>-R : 处理指定目录以及其子目录下的所有文件</li></ul><p><code>chown -R clog:clog /home/clog/</code></p><h2 id="ldd" tabindex="-1">ldd <a class="header-anchor" href="#ldd" aria-label="Permalink to &quot;ldd&quot;">​</a></h2><h2 id="netstat" tabindex="-1">netstat <a class="header-anchor" href="#netstat" aria-label="Permalink to &quot;netstat&quot;">​</a></h2><p><code>netstat -anp | grep gateway</code></p><h2 id="gdb" tabindex="-1">gdb <a class="header-anchor" href="#gdb" aria-label="Permalink to &quot;gdb&quot;">​</a></h2><p><code>gdb gateway /data/coredump/...</code></p><h2 id="perf" tabindex="-1">perf <a class="header-anchor" href="#perf" aria-label="Permalink to &quot;perf&quot;">​</a></h2><p><code>perf top -K -p 27041</code></p><blockquote><p>Perf 内置于Linux 内核源码树中的性能剖析工具。它基于事件采样原理，以性能事件为基础，支持针对处理器相关性能指标与操作系统相关性能指标的性能剖析。可用于性能瓶颈的查找与热点代码的定位</p></blockquote><h2 id="find" tabindex="-1">find <a class="header-anchor" href="#find" aria-label="Permalink to &quot;find&quot;">​</a></h2><p>::alert{type=&quot;info&quot;} <strong>Linux 查找当前目录下 包含特定字符串 的所有文件</strong> ::</p><p>使用 Linux 经常会遇到这种情况：只知道文件中包含某些特定的字符串，但是不知道具体的文件名。需要根据“特定的字符串”反向查找文件。</p><p>查找当前目录下，包含“Hello”字符串的所有文件</p><ol><li>【方式1】（其中，r 表示递归， n 表示查询结果显示行号）：<code>grep -rn &quot;Hello&quot; ./</code></li><li>【方式2】 <code>find ./ -name &quot;*.*&quot; | xargs grep &quot;Hello&quot;</code></li><li>【方式3】（-l 表示只显示文件名）<code>find . | xargs grep -ri &quot;Hello&quot;</code>或<code>find . | xargs grep -ri &quot;Hello&quot; -l</code></li><li>【方式4】 如果不知道文件所在的大致目录，知道文件的类型（例如文本类型 txt），可以在root根目录 / 下根据特定字符串进行查找：<code>find / -type f -name &quot;*.txt&quot; | xargs grep &quot;Hello&quot;</code></li></ol><p><strong>在系统中查找包含 bra 的文件或目录</strong>, combine <a href="#rm">rm</a> <a href="#xagrs">xargs</a> <a href="#wc">wc</a></p><p><code>find / -name &#39;*bra*&#39;</code></p><p><strong>在某目录下查找名为<code>app.cc</code>”\`的文件</strong></p><p><code>find /home/app/ -name app.cc</code></p><p><strong>查找文件名中包含某字符（如<code>app</code>）的文件</strong></p><p><code>find /home/app/ -name &#39;*app*&#39;</code><br><code>find /home/app/ -name &#39;app*&#39;</code><br><code>find /home/app/ -name &#39;*app&#39;</code></p><h2 id="rm" tabindex="-1">rm <a class="header-anchor" href="#rm" aria-label="Permalink to &quot;rm&quot;">​</a></h2><ul><li><code>-i</code> 删除前逐一询问确认。</li><li><code>-f</code> 即使原档案属性设为唯读，亦直接删除，无需逐一确认。</li><li><code>-r</code> 将目录及以下之档案亦逐一删除。</li></ul><p><code>rm -rf</code></p><p>find and then delete</p><ul><li><code>find . -name &quot;*.a&quot; | wc -l</code></li><li><code>find . -name &quot;*.a&quot; | xargs rm -rfv</code></li></ul><h2 id="xargs" tabindex="-1">xargs <a class="header-anchor" href="#xargs" aria-label="Permalink to &quot;xargs&quot;">​</a></h2><p>xargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。</p><p><code>somecommand | xargs -item command</code></p><ul><li>-a file 从文件中读入作为 stdin</li><li>-e flag ，注意有的时候可能会是-E，flag必须是一个以空格分隔的标志，当xargs分析到含有flag这个标志的时候就停止。</li><li>-p 当每次执行一个argument的时候询问一次用户。</li><li>-n num 后面加次数，表示命令在执行的时候一次用的argument的个数，默认是用所有的。</li><li>-t 表示先打印命令，然后再执行。</li><li>-i 或者是-I，这得看linux支持了，将xargs的每项名称，一般是一行一行赋值给 {}，可以用 {} 代替。</li><li>-r no-run-if-empty 当xargs的输入为空的时候则停止xargs，不用再去执行了。</li><li>-s num 命令行的最大字符数，指的是 xargs 后面那个命令的最大命令行字符数。</li><li>-L num 或者是 -l num 从标准输入一次读取 num 行送给 command 命令。</li><li>-d delim 分隔符，默认的xargs分隔符是回车，argument的分隔符是空格，这里修改的是xargs的分隔符。</li><li>-x exit的意思，主要是配合-s使用。。</li><li>-P 修改最大的进程数，默认是1，为0时候为as many as it can</li></ul><h2 id="wc" tabindex="-1">wc <a class="header-anchor" href="#wc" aria-label="Permalink to &quot;wc&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">wc</span><span style="color:#E1E4E8;"> [-clw][--help][--version][file...]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">wc</span><span style="color:#24292E;"> [-clw][--help][--version][file...]</span></span></code></pre></div><ul><li>-c或--bytes或--chars 只显示Bytes数。</li><li>-l或--lines 显示行数。</li><li>-w或--words 只显示字数。</li><li>--help 在线帮助。</li><li>--version 显示版本信息。</li></ul><h2 id="ar" tabindex="-1">ar <a class="header-anchor" href="#ar" aria-label="Permalink to &quot;ar&quot;">​</a></h2><p>Linux ar命令用于建立或修改备存文件，或是从备存文件中抽取文件。<br> ar可让您集合许多文件，成为单一的备存文件。在备存文件中，所有成员文件皆保有原来的属性与权限。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ar[-dmpqrtx][cfosSuvV][a&lt;成员文件&gt;][b&lt;成员文件&gt;][i&lt;成员文件&gt;][备存文件][成员文件]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ar[-dmpqrtx][cfosSuvV][a&lt;成员文件&gt;][b&lt;成员文件&gt;][i&lt;成员文件&gt;][备存文件][成员文件]</span></span></code></pre></div><blockquote><p><strong>必要参数</strong></p></blockquote><ul><li><code>-d</code> 　删除备存文件中的成员文件。</li><li><code>-m</code>　 变更成员文件在备存文件中的次序。</li><li><code>-p</code> 　显示备存文件中的成员文件内容。</li><li><code>-q</code> 　将文件附加在备存文件末端。</li><li><code>-r</code> 　将文件插入备存文件中。</li><li><code>-t</code> 　显示备存文件中所包含的文件。</li><li><code>-x</code> 　自备存文件中取出成员文件。</li></ul><blockquote><p><strong>选项参数</strong></p></blockquote><ul><li><code>a&lt;成员文件&gt;</code> 　将文件插入备存文件中指定的成员文件之后。</li><li><code>b&lt;成员文件&gt;</code> 　将文件插入备存文件中指定的成员文件之前。</li><li><code>c</code> 　建立备存文件。</li><li><code>f</code> 　为避免过长的文件名不兼容于其他系统的ar指令指令，因此可利用此参数，截掉要放入备存文件中过长的成员文件名称。</li><li><code>i&lt;成员文件&gt;</code> 　将文件插入备存文件中指定的成员文件之前。</li><li><code>o</code> 　保留备存文件中文件的日期。</li><li><code>s</code> 　若备存文件中包含了对象模式，可利用此参数建立备存文件的符号表。</li><li><code>S</code> 　不产生符号表。</li><li><code>u</code> 　只将日期较新文件插入备存文件中。</li><li><code>v</code> 　程序执行时显示详细的信息。</li><li><code>V</code> 　显示版本信息。</li></ul><h2 id="tree" tabindex="-1">tree <a class="header-anchor" href="#tree" aria-label="Permalink to &quot;tree&quot;">​</a></h2><p>获取目录结构</p><p>win</p><ul><li><p><code>tree</code> 只显示文件夹</p></li><li><p><code>tree /f</code> 显示文件夹及所有文件</p></li><li><p>导出</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tree</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/f</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">1.txt</span></span>
<span class="line"><span style="color:#B392F0;">保存的树形结构，只含有文件夹</span></span>
<span class="line"><span style="color:#B392F0;">tree</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/f</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">1.txt</span></span>
<span class="line"><span style="color:#B392F0;">保存的树形结构，包含文件夹和文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tree</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/f</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">1.txt</span></span>
<span class="line"><span style="color:#6F42C1;">保存的树形结构，只含有文件夹</span></span>
<span class="line"><span style="color:#6F42C1;">tree</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/f</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">1.txt</span></span>
<span class="line"><span style="color:#6F42C1;">保存的树形结构，包含文件夹和文件</span></span></code></pre></div></li></ul><p>mac</p><ul><li><code>brew install tree</code></li><li><code>tree</code></li><li><code>tree -L 1</code> 只显示一级目录</li><li><code>-d</code> option displays only directories</li><li><code>-I</code> option allows to exclude directories that match specific pattern <code>tree -I &#39;node_modules|cache|test_*&#39;</code></li></ul><p>e.g.<br><code>tree -a -I &#39;node_modules|.git|.github|.idea|.vscode|.cache|.temp|nuxt*|dist&#39; -L 4 &gt; 1.txt</code></p><p><code>-a</code> All files are printed. By default tree does not print hidden files (those beginning with a dot <code>.&#39;). In no event does tree print the file system constructs </code>.<code>(current directory) and</code>..\` (previous directory).</p><h2 id="cat" tabindex="-1">cat <a class="header-anchor" href="#cat" aria-label="Permalink to &quot;cat&quot;">​</a></h2><p>Linux复制文件内容到另一个文件中</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 将a文件中的内容追加到b文件中的末尾命令</span></span>
<span class="line"><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将a文件中的内容覆盖b文件内容命令</span></span>
<span class="line"><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 清空文件内容</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> filename</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">filename</span></span>
<span class="line"><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/dev/null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">filename</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 将a文件中的内容追加到b文件中的末尾命令</span></span>
<span class="line"><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将a文件中的内容覆盖b文件内容命令</span></span>
<span class="line"><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 清空文件内容</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> filename</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">filename</span></span>
<span class="line"><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/dev/null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">filename</span></span></code></pre></div><h2 id="" tabindex="-1">&gt; <a class="header-anchor" href="#" aria-label="Permalink to &quot;&gt;&quot;">​</a></h2><p>输出重定向</p><p>mac</p><p>有两种方式可以将输出重定向：</p><ul><li><code>n&gt; file</code> 将文件描述符n重定向到文件file中，如果文件不存在则会创建文件，如果存在的话将会覆盖原有内容。</li><li><code>n&gt;&gt; file</code> 将文件描述符n重定向到文件file中，如果文件不存在将会创建文件，如果存在则会在文件的结尾开始写入输出。</li></ul><h2 id="rz-sz" tabindex="-1">rz sz <a class="header-anchor" href="#rz-sz" aria-label="Permalink to &quot;rz sz&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">apt-get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lrzsz</span></span>
<span class="line"><span style="color:#6A737D;"># 从服务端发送文件到客户端：</span></span>
<span class="line"><span style="color:#B392F0;">sz</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">filename</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 从客户端上传文件到服务端：</span></span>
<span class="line"><span style="color:#B392F0;">rz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">apt-get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lrzsz</span></span>
<span class="line"><span style="color:#6A737D;"># 从服务端发送文件到客户端：</span></span>
<span class="line"><span style="color:#6F42C1;">sz</span><span style="color:#24292E;"> </span><span style="color:#032F62;">filename</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 从客户端上传文件到服务端：</span></span>
<span class="line"><span style="color:#6F42C1;">rz</span></span></code></pre></div><p>sz 命令</p><ul><li>用途说明：将选定的文件发送（send）到本地机器。sz命令是利用ZModem协议来从Linux服务器传送文件到本地，一次可以传送一个或多个文件。相对应的从本地上传文件到Linux服务器，可以使用rz命令。</li><li>常用参数 <ul><li><code>-a</code>： 以文本方式传输（ascii）。</li><li><code>-b</code>： 以二进制方式传输（binary）。</li><li><code>-e</code>： 对控制字符转义（escape），这可以保证文件传输正确。</li></ul></li><li>如果能够确定所传输的文件是文本格式的，使用： <code>sz -a files</code></li><li>如果是二进制文件，使用： <code>sz -be files</code></li></ul><p><a href="https://linux.die.net/man/1/rz" target="_blank" rel="noreferrer">rz</a></p><ul><li><code>rz -bye</code></li></ul><h2 id="scp" tabindex="-1">scp <a class="header-anchor" href="#scp" aria-label="Permalink to &quot;scp&quot;">​</a></h2><p><code>scp -r server_a server_b</code></p><p>服务器A上执行scp到服务器B，报错：<code>Permission denied (publickey)</code>.</p><blockquote><p>解决方法，把A的公钥放到B上</p></blockquote><p>具体操作：</p><ul><li>A：cat .ssh/id_rsa.pub</li><li>B: cat .ssh/authorized_keys</li></ul><p>把A的公钥贴过来即可</p><h2 id="ssh-keygen" tabindex="-1"><a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key" target="_blank" rel="noreferrer">ssh-keygen</a> <a class="header-anchor" href="#ssh-keygen" aria-label="Permalink to &quot;[ssh-keygen]&quot;">​</a></h2><p><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></p><ul><li>-t 指定密钥类型，默认是 rsa ，可以省略。</li><li>-C 设置注释文字，比如邮箱。</li><li>-f 指定密钥文件存储文件名。</li></ul><h2 id="clip" tabindex="-1">clip <a class="header-anchor" href="#clip" aria-label="Permalink to &quot;clip&quot;">​</a></h2><p><code>clip &lt; ~/.ssh/id_rsa.pub</code></p><h2 id="crontab" tabindex="-1">crontab <a class="header-anchor" href="#crontab" aria-label="Permalink to &quot;crontab&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">crontab</span><span style="color:#E1E4E8;"> [-u </span><span style="color:#9ECBFF;">username]　　　　#省略用户表表示操作当前用户的crontab</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-e</span><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">#(编辑工作表)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-l</span><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">#(列出工作表里的命令)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-r</span><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">#(删除工作作)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">crontab</span><span style="color:#24292E;"> [-u </span><span style="color:#032F62;">username]　　　　#省略用户表表示操作当前用户的crontab</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-e</span><span style="color:#24292E;">      </span><span style="color:#6A737D;">#(编辑工作表)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-l</span><span style="color:#24292E;">      </span><span style="color:#6A737D;">#(列出工作表里的命令)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-r</span><span style="color:#24292E;">      </span><span style="color:#6A737D;">#(删除工作作)</span></span></code></pre></div><p>我们用<code>crontab -e</code>进入当前用户的工作表编辑，是常见的vim界面。每行是一条命令。 crontab的命令构成为 时间+动作，其时间有分、时、日、月、周五种，操作符有</p><ul><li><code>*</code> 取值范围内的所有数字</li><li><code>/</code> 每过多少个数字</li><li><code>-</code> 从X到Z</li><li><code>,</code> 散列数字</li></ul><p>实例</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">实例1：每1分钟执行一次myCommand</span></span>
<span class="line"><span style="color:#e1e4e8;">* * * * * myCommand</span></span>
<span class="line"><span style="color:#e1e4e8;">实例2：每小时的第3和第15分钟执行</span></span>
<span class="line"><span style="color:#e1e4e8;">3,15 * * * * myCommand</span></span>
<span class="line"><span style="color:#e1e4e8;">实例3：在上午8点到11点的第3和第15分钟执行</span></span>
<span class="line"><span style="color:#e1e4e8;">3,15 8-11 * * * myCommand</span></span>
<span class="line"><span style="color:#e1e4e8;">实例4：每隔两天的上午8点到11点的第3和第15分钟执行</span></span>
<span class="line"><span style="color:#e1e4e8;">3,15 8-11 */2  *  * myCommand</span></span>
<span class="line"><span style="color:#e1e4e8;">实例5：每周一上午8点到11点的第3和第15分钟执行</span></span>
<span class="line"><span style="color:#e1e4e8;">3,15 8-11 * * 1 myCommand</span></span>
<span class="line"><span style="color:#e1e4e8;">实例6：每晚的21:30重启smb</span></span>
<span class="line"><span style="color:#e1e4e8;">30 21 * * * /etc/init.d/smb restart</span></span>
<span class="line"><span style="color:#e1e4e8;">实例7：每月1、10、22日的4 : 45重启smb</span></span>
<span class="line"><span style="color:#e1e4e8;">45 4 1,10,22 * * /etc/init.d/smb restart</span></span>
<span class="line"><span style="color:#e1e4e8;">实例8：每周六、周日的1 : 10重启smb</span></span>
<span class="line"><span style="color:#e1e4e8;">10 1 * * 6,0 /etc/init.d/smb restart</span></span>
<span class="line"><span style="color:#e1e4e8;">实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb</span></span>
<span class="line"><span style="color:#e1e4e8;">0,30 18-23 * * * /etc/init.d/smb restart</span></span>
<span class="line"><span style="color:#e1e4e8;">实例10：每星期六的晚上11 : 00 pm重启smb</span></span>
<span class="line"><span style="color:#e1e4e8;">0 23 * * 6 /etc/init.d/smb restart</span></span>
<span class="line"><span style="color:#e1e4e8;">实例11：每一小时重启smb</span></span>
<span class="line"><span style="color:#e1e4e8;">0 */1 * * * /etc/init.d/smb restart</span></span>
<span class="line"><span style="color:#e1e4e8;">实例12：晚上11点到早上7点之间，每隔一小时重启smb</span></span>
<span class="line"><span style="color:#e1e4e8;">0 23-7/1 * * * /etc/init.d/smb restart</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">实例1：每1分钟执行一次myCommand</span></span>
<span class="line"><span style="color:#24292e;">* * * * * myCommand</span></span>
<span class="line"><span style="color:#24292e;">实例2：每小时的第3和第15分钟执行</span></span>
<span class="line"><span style="color:#24292e;">3,15 * * * * myCommand</span></span>
<span class="line"><span style="color:#24292e;">实例3：在上午8点到11点的第3和第15分钟执行</span></span>
<span class="line"><span style="color:#24292e;">3,15 8-11 * * * myCommand</span></span>
<span class="line"><span style="color:#24292e;">实例4：每隔两天的上午8点到11点的第3和第15分钟执行</span></span>
<span class="line"><span style="color:#24292e;">3,15 8-11 */2  *  * myCommand</span></span>
<span class="line"><span style="color:#24292e;">实例5：每周一上午8点到11点的第3和第15分钟执行</span></span>
<span class="line"><span style="color:#24292e;">3,15 8-11 * * 1 myCommand</span></span>
<span class="line"><span style="color:#24292e;">实例6：每晚的21:30重启smb</span></span>
<span class="line"><span style="color:#24292e;">30 21 * * * /etc/init.d/smb restart</span></span>
<span class="line"><span style="color:#24292e;">实例7：每月1、10、22日的4 : 45重启smb</span></span>
<span class="line"><span style="color:#24292e;">45 4 1,10,22 * * /etc/init.d/smb restart</span></span>
<span class="line"><span style="color:#24292e;">实例8：每周六、周日的1 : 10重启smb</span></span>
<span class="line"><span style="color:#24292e;">10 1 * * 6,0 /etc/init.d/smb restart</span></span>
<span class="line"><span style="color:#24292e;">实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb</span></span>
<span class="line"><span style="color:#24292e;">0,30 18-23 * * * /etc/init.d/smb restart</span></span>
<span class="line"><span style="color:#24292e;">实例10：每星期六的晚上11 : 00 pm重启smb</span></span>
<span class="line"><span style="color:#24292e;">0 23 * * 6 /etc/init.d/smb restart</span></span>
<span class="line"><span style="color:#24292e;">实例11：每一小时重启smb</span></span>
<span class="line"><span style="color:#24292e;">0 */1 * * * /etc/init.d/smb restart</span></span>
<span class="line"><span style="color:#24292e;">实例12：晚上11点到早上7点之间，每隔一小时重启smb</span></span>
<span class="line"><span style="color:#24292e;">0 23-7/1 * * * /etc/init.d/smb restart</span></span></code></pre></div><h2 id="logrotate" tabindex="-1"><a href="https://www.xmodulo.com/logrotate-manage-log-files-linux.html" target="_blank" rel="noreferrer">logrotate</a> <a class="header-anchor" href="#logrotate" aria-label="Permalink to &quot;[logrotate]&quot;">​</a></h2><p>主流Linux发行版上都默认安装有logrotate包，如果出于某种原因，logrotate没有出现在里头，你可以使用apt-get或yum命令来安装。</p><ul><li><code>apt-get install logrotate cron</code></li><li><code>yum install logrotate crontabs</code></li></ul><p>logrotate的配置文件是<code>/etc/logrotate.conf</code>，通常不需要对它进行修改。日志文件的轮循设置在独立的配置文件中，它（们）放在<code>/etc/logrotate.d/</code>目录下。</p><p>案例</p><p>从创建一个日志文件开始，然后在其中填入一个10MB的随机比特流数据。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">touch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/var/log/log-file</span></span>
<span class="line"><span style="color:#B392F0;">head</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">M</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/dev/urandom</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/var/log/log-file</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">touch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/var/log/log-file</span></span>
<span class="line"><span style="color:#6F42C1;">head</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">M</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/dev/urandom</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/var/log/log-file</span></span></code></pre></div><p>创建一个配置文件 <code>vim /etc/logrotate.d/log-file</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">/var/log/log-file {</span></span>
<span class="line"><span style="color:#e1e4e8;">    monthly</span></span>
<span class="line"><span style="color:#e1e4e8;">    rotate 5</span></span>
<span class="line"><span style="color:#e1e4e8;">    compress</span></span>
<span class="line"><span style="color:#e1e4e8;">    delaycompress</span></span>
<span class="line"><span style="color:#e1e4e8;">    missingok</span></span>
<span class="line"><span style="color:#e1e4e8;">    notifempty</span></span>
<span class="line"><span style="color:#e1e4e8;">    create 644 root root</span></span>
<span class="line"><span style="color:#e1e4e8;">    postrotate</span></span>
<span class="line"><span style="color:#e1e4e8;">        /usr/bin/killall -HUP rsyslogd</span></span>
<span class="line"><span style="color:#e1e4e8;">    endscript</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/var/log/log-file {</span></span>
<span class="line"><span style="color:#24292e;">    monthly</span></span>
<span class="line"><span style="color:#24292e;">    rotate 5</span></span>
<span class="line"><span style="color:#24292e;">    compress</span></span>
<span class="line"><span style="color:#24292e;">    delaycompress</span></span>
<span class="line"><span style="color:#24292e;">    missingok</span></span>
<span class="line"><span style="color:#24292e;">    notifempty</span></span>
<span class="line"><span style="color:#24292e;">    create 644 root root</span></span>
<span class="line"><span style="color:#24292e;">    postrotate</span></span>
<span class="line"><span style="color:#24292e;">        /usr/bin/killall -HUP rsyslogd</span></span>
<span class="line"><span style="color:#24292e;">    endscript</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><ul><li>monthly: 日志文件将按月轮循。其它可用值为‘daily’，‘weekly’或者‘yearly’。</li><li>rotate 5: 一次将存储5个归档日志。对于第六个归档，时间最久的归档将被删除。</li><li>compress: 在轮循任务完成后，已轮循的归档将使用gzip进行压缩。</li><li>delaycompress: 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。</li><li>missingok: 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。</li><li>notifempty: 如果日志文件为空，轮循不会进行。</li><li>create 644 root root: 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件。</li><li>postrotate/endscript: 在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。</li></ul><h2 id="lsof" tabindex="-1">lsof <a class="header-anchor" href="#lsof" aria-label="Permalink to &quot;lsof&quot;">​</a></h2><p>list open files</p><p><code>lsof -i: port</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">lsof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i:8080：查看8080端口占用</span></span>
<span class="line"><span style="color:#B392F0;">lsof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">abc.txt：显示开启文件abc.txt的进程</span></span>
<span class="line"><span style="color:#B392F0;">lsof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">abc：显示abc进程现在打开的文件</span></span>
<span class="line"><span style="color:#B392F0;">lsof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1234</span><span style="color:#9ECBFF;">：列出进程号为1234的进程所打开的文件</span></span>
<span class="line"><span style="color:#B392F0;">lsof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gid：显示归属gid的进程情况</span></span>
<span class="line"><span style="color:#B392F0;">lsof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/local/：显示目录下被进程开启的文件</span></span>
<span class="line"><span style="color:#B392F0;">lsof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+D</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/local/：同上，但是会搜索目录下的目录，时间较长</span></span>
<span class="line"><span style="color:#B392F0;">lsof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">：显示使用fd为4的进程</span></span>
<span class="line"><span style="color:#B392F0;">lsof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-U：显示所有打开的端口和UNIX</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">domain文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">lsof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i:8080：查看8080端口占用</span></span>
<span class="line"><span style="color:#6F42C1;">lsof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">abc.txt：显示开启文件abc.txt的进程</span></span>
<span class="line"><span style="color:#6F42C1;">lsof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c</span><span style="color:#24292E;"> </span><span style="color:#032F62;">abc：显示abc进程现在打开的文件</span></span>
<span class="line"><span style="color:#6F42C1;">lsof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1234</span><span style="color:#032F62;">：列出进程号为1234的进程所打开的文件</span></span>
<span class="line"><span style="color:#6F42C1;">lsof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gid：显示归属gid的进程情况</span></span>
<span class="line"><span style="color:#6F42C1;">lsof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/：显示目录下被进程开启的文件</span></span>
<span class="line"><span style="color:#6F42C1;">lsof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/：同上，但是会搜索目录下的目录，时间较长</span></span>
<span class="line"><span style="color:#6F42C1;">lsof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">：显示使用fd为4的进程</span></span>
<span class="line"><span style="color:#6F42C1;">lsof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-U：显示所有打开的端口和UNIX</span><span style="color:#24292E;"> </span><span style="color:#032F62;">domain文件</span></span></code></pre></div><h2 id="netstat-1" tabindex="-1">netstat <a class="header-anchor" href="#netstat-1" aria-label="Permalink to &quot;netstat&quot;">​</a></h2><p><code>netstat -tunlp</code> 用于显示 tcp，udp 的端口和进程等相关情况。</p><p><code>netstat -tunlp | grep port</code></p><ul><li>-t (tcp) 仅显示tcp相关选项</li><li>-u (udp)仅显示udp相关选项</li><li>-n 拒绝显示别名，能显示数字的全部转化为数字</li><li>-l 仅列出在Listen(监听)的服务状态</li><li>-p 显示建立相关链接的程序名</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">netstat</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-ntlp</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">//查看当前所有tcp端口</span></span>
<span class="line"><span style="color:#B392F0;">netstat</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-ntulp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">//查看所有80端口使用情况</span></span>
<span class="line"><span style="color:#B392F0;">netstat</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-ntulp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3306</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">//查看所有3306端口使用情况</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">netstat</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-ntlp</span><span style="color:#24292E;">   </span><span style="color:#032F62;">//查看当前所有tcp端口</span></span>
<span class="line"><span style="color:#6F42C1;">netstat</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-ntulp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">80</span><span style="color:#24292E;">   </span><span style="color:#032F62;">//查看所有80端口使用情况</span></span>
<span class="line"><span style="color:#6F42C1;">netstat</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-ntulp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3306</span><span style="color:#24292E;">   </span><span style="color:#032F62;">//查看所有3306端口使用情况</span></span></code></pre></div><h2 id="curl" tabindex="-1">curl <a class="header-anchor" href="#curl" aria-label="Permalink to &quot;curl&quot;">​</a></h2><blockquote><p><a href="https://catonmat.net/cookbooks/curl" target="_blank" rel="noreferrer">refer</a></p></blockquote><h3 id="command" tabindex="-1">command <a class="header-anchor" href="#command" aria-label="Permalink to &quot;command&quot;">​</a></h3><p><a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html" target="_blank" rel="noreferrer">curl command</a></p><h3 id="查看网页源码" tabindex="-1">查看网页源码 <a class="header-anchor" href="#查看网页源码" aria-label="Permalink to &quot;查看网页源码&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">genshin.hoyoverse.com/main/news/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">genshin.hoyoverse.com/main/news/</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;hr&gt;&lt;center&gt;CloudFront&lt;/center&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/body&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/html&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;hr&gt;&lt;center&gt;CloudFront&lt;/center&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/body&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/html&gt;</span></span></code></pre></div><p>如果要把这个网页保存下来，可以使用<code>-o</code>参数，这就相当于使用wget命令了。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file_name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">genshin.hoyoverse.com/main/news/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file_name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">genshin.hoyoverse.com/main/news/</span></span></code></pre></div><h3 id="自动跳转" tabindex="-1">自动跳转 <a class="header-anchor" href="#自动跳转" aria-label="Permalink to &quot;自动跳转&quot;">​</a></h3><p>有的网址是自动跳转的。使用<code>-L</code>参数，curl就会跳转到新的网址。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-L</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">genshin.hoyoverse.com/main/news/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-L</span><span style="color:#24292E;"> </span><span style="color:#032F62;">genshin.hoyoverse.com/main/news/</span></span></code></pre></div><h3 id="显示头信息" tabindex="-1">显示头信息 <a class="header-anchor" href="#显示头信息" aria-label="Permalink to &quot;显示头信息&quot;">​</a></h3><p><code>-i</code>参数可以显示http response的头信息，连同网页代码一起。</p><p><code>-I</code>参数则是只显示http response的头信息。</p><h3 id="显示通信过程" tabindex="-1">显示通信过程 <a class="header-anchor" href="#显示通信过程" aria-label="Permalink to &quot;显示通信过程&quot;">​</a></h3><p><code>-v</code>参数可以显示一次http通信的整个过程，包括端口连接和http request头信息。</p><p>如果你觉得上面的信息还不够，那么下面的命令可以查看更详细的通信过程。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--trace</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">output.txt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">genshin.hoyoverse.com/main/news/</span></span>
<span class="line"><span style="color:#6A737D;"># or</span></span>
<span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--trace-ascii</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">output.txt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">genshin.hoyoverse.com/main/news/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--trace</span><span style="color:#24292E;"> </span><span style="color:#032F62;">output.txt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">genshin.hoyoverse.com/main/news/</span></span>
<span class="line"><span style="color:#6A737D;"># or</span></span>
<span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--trace-ascii</span><span style="color:#24292E;"> </span><span style="color:#032F62;">output.txt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">genshin.hoyoverse.com/main/news/</span></span></code></pre></div><h3 id="发送表单信息" tabindex="-1">发送表单信息 <a class="header-anchor" href="#发送表单信息" aria-label="Permalink to &quot;发送表单信息&quot;">​</a></h3><p>发送表单信息有GET和POST两种方法。GET方法相对简单，只要把数据附在网址后面就行。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">example.com/augus?data=xxx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">example.com/augus?data=xxx</span></span></code></pre></div><p>POST方法必须把数据和网址分开，curl就要用到<code>--data</code>参数。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-X</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">POST</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--data</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;data=xxx&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">example.com/augus</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-X</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--data</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;data=xxx&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">example.com/augus</span></span></code></pre></div><p>如果你的数据没有经过表单编码，还可以让curl为你编码，参数是<code>--data-urlencode</code>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-X</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">POST</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--data-urlencode</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;date=April 1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">example.com/augus</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-X</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--data-urlencode</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;date=April 1&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">example.com/augus</span></span></code></pre></div><h3 id="http动词" tabindex="-1">HTTP动词 <a class="header-anchor" href="#http动词" aria-label="Permalink to &quot;HTTP动词&quot;">​</a></h3><p>curl默认的HTTP动词是GET，使用<code>-X</code>参数可以支持其他动词。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-X</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">POST</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">www.example.com</span></span>
<span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-X</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">DELETE</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">www.example.com</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-X</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST</span><span style="color:#24292E;"> </span><span style="color:#032F62;">www.example.com</span></span>
<span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-X</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DELETE</span><span style="color:#24292E;"> </span><span style="color:#032F62;">www.example.com</span></span></code></pre></div><h2 id="readelf" tabindex="-1">readelf <a class="header-anchor" href="#readelf" aria-label="Permalink to &quot;readelf&quot;">​</a></h2><h2 id="objdump" tabindex="-1">objdump <a class="header-anchor" href="#objdump" aria-label="Permalink to &quot;objdump&quot;">​</a></h2><h2 id="addr2line" tabindex="-1">addr2line <a class="header-anchor" href="#addr2line" aria-label="Permalink to &quot;addr2line&quot;">​</a></h2><h2 id="others" tabindex="-1">others <a class="header-anchor" href="#others" aria-label="Permalink to &quot;others&quot;">​</a></h2><ul><li><a href="https://blog.csdn.net/xusensen/article/details/54606401" target="_blank" rel="noreferrer">Linux使用sar进行性能分析</a></li><li><a href="https://blog.csdn.net/xusensen/article/details/73080887" target="_blank" rel="noreferrer">使用iostat分析IO性能</a></li></ul><hr><p><strong>参考：</strong></p><ul><li><a href="https://www.runoob.com/linux/linux-comm-date.html" target="_blank" rel="noreferrer">runoob date</a></li><li><a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key" target="_blank" rel="noreferrer">ssh-keygen</a></li><li><a href="https://www.xmodulo.com/logrotate-manage-log-files-linux.html" target="_blank" rel="noreferrer">logrotate</a></li></ul>`,194),c=[p];function r(i,d,y,h,u,g){return l(),a("div",null,c)}const b=s(t,[["render",r]]);export{m as __pageData,b as default};
