import{_ as i,c as a,a3 as t,o as e}from"./chunks/framework.DDs3IadZ.js";const c=JSON.parse('{"title":"Shell","description":"","frontmatter":{"icon":"vscode-icons:file-type-powershell-psd2"},"headers":[],"relativePath":"code/program/lang/shell.md","filePath":"code/program/lang/shell.md","lastUpdated":1723194308000}'),l={name:"code/program/lang/shell.md"};function n(h,s,p,d,k,o){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="shell" tabindex="-1">Shell <a class="header-anchor" href="#shell" aria-label="Permalink to &quot;Shell&quot;">​</a></h1><p><a href="https://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noreferrer">refer</a></p><p>第一个 shell 脚本</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello World !&quot;</span></span></code></pre></div><p><code>#!</code> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。扩展名并不影响脚本执行<br> echo 命令用于向窗口输出文本。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./test.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #使脚本具有执行权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./test.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #执行脚本</span></span></code></pre></div><h2 id="run" tabindex="-1">run <a class="header-anchor" href="#run" aria-label="Permalink to &quot;run&quot;">​</a></h2><ol><li>作为可执行程序 将上面的代码保存为 test.sh，并 cd 到相应目录：</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./test.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #使脚本具有执行权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./test.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #执行脚本</span></span></code></pre></div><p>注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。 2. 作为解释器参数 这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/bin/sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/bin/php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.php</span></span></code></pre></div><p>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。</p><h2 id="grammar" tabindex="-1">Grammar <a class="header-anchor" href="#grammar" aria-label="Permalink to &quot;Grammar&quot;">​</a></h2><h3 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h3><p>以 <code>#</code> 开头的行就是注释，会被解释器忽略。通过每一行加一个 # 号设置多行注释，如</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># comment</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## ff</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># foo</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># fo</span></span></code></pre></div><p>EOF 注释</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注释内容...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注释内容...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注释内容...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># EOF 也可以使用其他符号</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注释内容...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注释内容...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注释内容...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注释内容...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注释内容...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注释内容...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!</span></span></code></pre></div><p>其他 (需要在自己编译环境下，亲测每种注释方法的有效性)</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">被注释的内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">被注释的内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) &amp;&amp; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">被注释的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h3><h4 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h4><p><strong>局部变量</strong> 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。<br><strong>环境变量</strong> 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</p><h4 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.name&quot;</span></span></code></pre></div><p>变量名的命名须遵循如下规则：</p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线 <code>_</code> 。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul><p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#或</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>已定义的变量，可以被重新定义</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;augus&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${foo}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;meow&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${foo}</span></span></code></pre></div><h4 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h4><p>使用一个定义过的变量，只要在变量名前面加美元符号即可</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;augus&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $foo</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${foo}</span></span></code></pre></div><p>变量名外面的花括号是可选的，加花括号是为了帮助解释器识别变量的边界</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> skill </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Vue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Rust</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I am good at \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">skill</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} lang&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><h4 id="只读" tabindex="-1">只读 <a class="header-anchor" href="#只读" aria-label="Permalink to &quot;只读&quot;">​</a></h4><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://draugus.github.io/&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url</span></span></code></pre></div><h4 id="删除变量" tabindex="-1">删除变量 <a class="header-anchor" href="#删除变量" aria-label="Permalink to &quot;删除变量&quot;">​</a></h4><p>使用 unset 命令可以删除变量。语法：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> variable_name</span></span></code></pre></div><p>变量被删除后不能再次使用。unset 命令不能删除只读变量。</p><h4 id="string" tabindex="-1">string <a class="header-anchor" href="#string" aria-label="Permalink to &quot;string&quot;">​</a></h4><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><h5 id="单引号" tabindex="-1">单引号 <a class="header-anchor" href="#单引号" aria-label="Permalink to &quot;单引号&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;this is a string&#39;</span></span></code></pre></div><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为<a href="#拼接字符串">字符串拼接</a>使用。</li></ul><h5 id="双引号" tabindex="-1">双引号 <a class="header-anchor" href="#双引号" aria-label="Permalink to &quot;双引号&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">your_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;au&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, I know you are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$your_name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">! \\n&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $str</span></span></code></pre></div><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h5 id="拼接字符串" tabindex="-1">拼接字符串 <a class="header-anchor" href="#拼接字符串" aria-label="Permalink to &quot;拼接字符串&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">your_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;meow&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用双引号拼接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello, &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$your_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; !&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greeting_1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello, \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">your_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} !&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $greeting  $greeting_1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用单引号拼接 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greeting_2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello, &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$your_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; !&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greeting_3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello, \${your_name} !&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $greeting_2  $greeting_3</span></span></code></pre></div><h5 id="获取字符串长度" tabindex="-1">获取字符串长度 <a class="header-anchor" href="#获取字符串长度" aria-label="Permalink to &quot;获取字符串长度&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abcd&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string}     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string[0]}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 4</span></span></code></pre></div><p>变量为数组时，<code>\${#string}</code> 等价于 <code>\${#string[0]}</code></p><h5 id="提取子字符串" tabindex="-1">提取子字符串 <a class="header-anchor" href="#提取子字符串" aria-label="Permalink to &quot;提取子字符串&quot;">​</a></h5><p>以下实例从字符串第 2 个字符开始截取 4 个字符：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;augus is a person&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">4} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 ugus</span></span></code></pre></div><p>注意：第一个字符的索引值为 0。</p><h5 id="查找子字符串" tabindex="-1">查找子字符串 <a class="header-anchor" href="#查找子字符串" aria-label="Permalink to &quot;查找子字符串&quot;">​</a></h5><p>查找字符 g 或 u 的位置(哪个字母先出现就计算哪个)：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;augus is a great person&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; gu\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 输出 1</span></span></code></pre></div><h4 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h4><p>支持一维数组（不支持多维数组），并且没有限定数组的大小。<br> 类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。</p><h5 id="定义-1" tabindex="-1">定义 <a class="header-anchor" href="#定义-1" aria-label="Permalink to &quot;定义&quot;">​</a></h5><p>用括号来表示数组，数组元素用&quot;空格&quot;符号分割开。定义数组的一般形式为：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 数组名=(值1 值2 ... 值n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">array_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">value0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>可以不使用连续的下标，而且下标的范围没有限制。</p><h5 id="读取" tabindex="-1">读取 <a class="header-anchor" href="#读取" aria-label="Permalink to &quot;读取&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># \${数组名[下标]}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">valuen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${array_name[n]}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 @ 符号可以获取数组中的所有元素</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${array_name[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]}</span></span></code></pre></div><h5 id="获取数组的长度" tabindex="-1">获取数组的长度 <a class="header-anchor" href="#获取数组的长度" aria-label="Permalink to &quot;获取数组的长度&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 取得数组元素的个数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">array_name[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">array_name[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 取得数组单个元素的长度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lengthn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">array_name[n]}</span></span></code></pre></div><h3 id="echo" tabindex="-1">echo <a class="header-anchor" href="#echo" aria-label="Permalink to &quot;echo&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;OK! \\n&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # -e 开启转义</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;It is a test&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;OK! \\c&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # -e 开启转义 \\c 不换行</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;It is a test&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;It is a test&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myfile</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 重定向</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 显示命令执行结果</span></span></code></pre></div><h3 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h3><h4 id="算术运算符" tabindex="-1">算术运算符 <a class="header-anchor" href="#算术运算符" aria-label="Permalink to &quot;算术运算符&quot;">​</a></h4><p>假定变量 a 为 10，变量 b 为 20</p><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">说明</th><th style="text-align:left;">举例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>+</code></td><td style="text-align:left;">加法</td><td style="text-align:left;"><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td style="text-align:left;"><code>-</code></td><td style="text-align:left;">减法</td><td style="text-align:left;"><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td style="text-align:left;"><code>*</code></td><td style="text-align:left;">乘法</td><td style="text-align:left;"><code>expr $a \\* $b</code> 结果为 200。</td></tr><tr><td style="text-align:left;"><code>/</code></td><td style="text-align:left;">除法</td><td style="text-align:left;"><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td style="text-align:left;"><code>%</code></td><td style="text-align:left;">取余</td><td style="text-align:left;"><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td style="text-align:left;"><code>=</code></td><td style="text-align:left;">赋值</td><td style="text-align:left;"><code>a=$b</code> 把变量 b 的值赋给 a。</td></tr><tr><td style="text-align:left;"><code>==</code></td><td style="text-align:left;">相等。用于比较两个数字，相同则返回 true。</td><td style="text-align:left;"><code>[ $a == $b ]</code> 返回 false。</td></tr><tr><td style="text-align:left;"><code>!=</code></td><td style="text-align:left;">不相等。用于比较两个数字，不相同则返回 true。</td><td style="text-align:left;"><code>[ $a != $b ]</code> 返回 true。</td></tr></tbody></table><blockquote><p>注意：条件表达式要放在方括号之间，并且要有空格，例如: <code>[$a==$b]</code> 是错误的，必须写成 <code>[ $a == $b ]</code>。</p></blockquote><p>推荐用 <code>$()</code> 代替 \`\`:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> + </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="关系运算符" tabindex="-1">关系运算符 <a class="header-anchor" href="#关系运算符" aria-label="Permalink to &quot;关系运算符&quot;">​</a></h4><blockquote><p>只支持数字</p></blockquote><p>假定变量 a 为 10，变量 b 为 20</p><ul><li><code>-eq</code> = EQUAL <code>[ $a -eq $b ]</code> 返回 false</li><li><code>-ne</code> != NOT EQUAL <code>[ $a -ne $b ]</code> 返回 true</li><li><code>-gt</code> &gt; GREATER THAN <code>[ $a -gt $b ]</code> 返回 false</li><li><code>-lt</code> &lt; LESS THAN <code>[ $a -lt $b ]</code> 返回 true</li><li><code>ge</code> &gt;= GREATER THAN OR EQUAL <code>[ $a -ge $b ]</code> 返回 false</li><li><code>le</code> &lt;= LESS THAN OR EQUAL <code>[ $a -le $b ]</code> 返回 true</li></ul><h4 id="布尔运算符" tabindex="-1">布尔运算符 <a class="header-anchor" href="#布尔运算符" aria-label="Permalink to &quot;布尔运算符&quot;">​</a></h4><ul><li><code>!</code> 非</li><li><code>-o</code> 或</li><li><code>-a</code> 与</li></ul><h4 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h4><p><code>&amp;&amp;</code> <code>||</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">command1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">command2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #命令1执行成功后，命令2才执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">command1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> command2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #命令1执行失败后，命令2才执行</span></span></code></pre></div><blockquote><p>使用 <code>[[ ... ]]</code> 条件判断结构，而不是 <code>[ ... ]</code>，能够防止脚本中的许多逻辑错误。比如，<code>&amp;&amp;</code>、<code>||</code>、<code>&lt;</code> 和 <code>&gt;</code> 操作符能够正常存在于 <code>[[ ]]</code> 条件判断结构中，但是如果出现在 <code>[ ]</code> 结构中的话，会报错。</p></blockquote><h4 id="字符串运算符" tabindex="-1">字符串运算符 <a class="header-anchor" href="#字符串运算符" aria-label="Permalink to &quot;字符串运算符&quot;">​</a></h4><p>假定变量 a 为 &quot;abc&quot;，变量 b 为 &quot;efg&quot;</p><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">说明</th><th style="text-align:left;">举例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>=</code></td><td style="text-align:left;">检测两个字符串是否相等，相等返回 true</td><td style="text-align:left;"><code>[ $a = $b ]</code> 返回 false</td></tr><tr><td style="text-align:left;"><code>!=</code></td><td style="text-align:left;">检测两个字符串是否不相等，不相等返回 true</td><td style="text-align:left;"><code>[ $a != $b ]</code> 返回 true</td></tr><tr><td style="text-align:left;"><code>-z</code></td><td style="text-align:left;">检测字符串长度是否为0，为0返回 true</td><td style="text-align:left;"><code>[ -z $a ]</code> 返回 false</td></tr><tr><td style="text-align:left;"><code>-n</code></td><td style="text-align:left;">检测字符串长度是否不为0，不为0返回 true</td><td style="text-align:left;"><code>[ -n &quot;$a&quot; ]</code> 返回 true (<code>$a</code>注意加双引号)</td></tr><tr><td style="text-align:left;"><code>$</code></td><td style="text-align:left;">检测字符串是否不为空，不为空返回 true</td><td style="text-align:left;"><code>[ $a ]</code> 返回 true</td></tr></tbody></table><h4 id="文件测试运算符" tabindex="-1">文件测试运算符 <a class="header-anchor" href="#文件测试运算符" aria-label="Permalink to &quot;文件测试运算符&quot;">​</a></h4><p>文件测试运算符用于检测 Unix 文件的各种属性</p><table tabindex="0"><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">说明</th><th style="text-align:left;">举例</th></tr></thead><tbody><tr><td style="text-align:left;">-b file</td><td style="text-align:left;">检测文件是否是块设备文件，如果是，则返回 true</td><td style="text-align:left;"><code>[ -b $file ]</code> 返回 false</td></tr><tr><td style="text-align:left;">-c file</td><td style="text-align:left;">检测文件是否是字符设备文件，如果是，则返回 true</td><td style="text-align:left;"><code>[ -c $file ]</code> 返回 false</td></tr><tr><td style="text-align:left;">-d file</td><td style="text-align:left;">检测文件是否是目录，如果是，则返回 true</td><td style="text-align:left;"><code>[ -d $file ]</code> 返回 false</td></tr><tr><td style="text-align:left;">-e file</td><td style="text-align:left;">检测文件（包括目录）是否存在，如果是，则返回 true</td><td style="text-align:left;"><code>[ -e $file ]</code> 返回 true</td></tr><tr><td style="text-align:left;">-f file</td><td style="text-align:left;">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true</td><td style="text-align:left;"><code>[ -f $file ]</code> 返回 true</td></tr><tr><td style="text-align:left;">-g file</td><td style="text-align:left;">检测文件是否设置了 SGID 位，如果是，则返回 true</td><td style="text-align:left;"><code>[ -g $file ]</code> 返回 false</td></tr><tr><td style="text-align:left;">-k file</td><td style="text-align:left;">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true</td><td style="text-align:left;"><code>[ -k $file ]</code> 返回 false</td></tr><tr><td style="text-align:left;">-p file</td><td style="text-align:left;">检测文件是否是有名管道，如果是，则返回 true</td><td style="text-align:left;"><code>[ -p $file ]</code> 返回 false</td></tr><tr><td style="text-align:left;">-u file</td><td style="text-align:left;">检测文件是否设置了 SUID 位，如果是，则返回 true</td><td style="text-align:left;"><code>[ -u $file ]</code> 返回 false</td></tr><tr><td style="text-align:left;">-r file</td><td style="text-align:left;">检测文件是否可读，如果是，则返回 true</td><td style="text-align:left;"><code>[ -r $file ]</code> 返回 true</td></tr><tr><td style="text-align:left;">-w file</td><td style="text-align:left;">检测文件是否可写，如果是，则返回 true</td><td style="text-align:left;"><code>[ -w $file ]</code> 返回 true</td></tr><tr><td style="text-align:left;">-x file</td><td style="text-align:left;">检测文件是否可执行，如果是，则返回 true</td><td style="text-align:left;"><code>[ -x $file ]</code> 返回 true</td></tr><tr><td style="text-align:left;">-s file</td><td style="text-align:left;">检测文件是否为空（文件大小是否大于0），不为空返回 true</td><td style="text-align:left;"><code>[ -s $file ]</code> 返回 true</td></tr><tr><td style="text-align:left;">-S file</td><td style="text-align:left;">判断某文件是否 socket</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">-L file</td><td style="text-align:left;">检测文件是否存在并且是一个符号链接</td><td style="text-align:left;">-</td></tr></tbody></table><h3 id="参数获取" tabindex="-1">参数获取 <a class="header-anchor" href="#参数获取" aria-label="Permalink to &quot;参数获取&quot;">​</a></h3><p>假设执行 <code>./test.sh a b c</code> 这样一个命令，则可以使用下面的参数来获取一些值：</p><ul><li><code>$0</code> 对应 <code>./test.sh</code> 这个值。如果执行的是 <code>./work/test.sh</code>， 则对应 <code>./work/test.sh</code> 这个值，而不是只返回文件名本身的部分。</li><li><code>$1</code> 会获取到 a，即 <code>$1</code> 对应传给脚本的第一个参数。</li><li><code>$2</code> 会获取到 b，即 <code>$2</code> 对应传给脚本的第二个参数。</li><li><code>$3</code> 会获取到 c，即 <code>$3</code> 对应传给脚本的第三个参数。<code>$4</code>、<code>$5</code> 等参数的含义依此类推。</li><li><code>$#</code> 会获取到 3，对应传入脚本的参数个数，统计的参数不包括 <code>$0</code>。</li><li><code>$@</code> 会获取到 &quot;a&quot; &quot;b&quot; &quot;c&quot;，也就是所有参数的列表，不包括 <code>$0</code>。</li><li><code>$*</code> 也会获取到 &quot;a&quot; &quot;b&quot; &quot;c&quot;， 其值和 <code>$@</code> 相同。但 <code>$*</code> 和 <code>$@</code> 有所不同。 <code>$*</code> 把所有参数合并成一个字符串，而 <code>$@</code> 会得到一个字符串参数数组。</li><li><code>$?</code> 可以获取到执行 <code>./test.sh a b c</code> 命令后的返回值。 在执行一个前台命令后，可以立即用 <code>$?</code> 获取到该命令的返回值。 该命令可以是系统自身的命令，可以是 shell 脚本，也可以是自定义的 bash 函数。 <ul><li>当执行系统自身的命令时，<code>$?</code> 对应这个命令的返回值。</li><li>当执行 shell 脚本时，<code>$?</code> 对应该脚本调用 exit 命令返回的值。如果没有主动调用 exit 命令，默认返回为 0。</li><li>当执行自定义的 bash 函数时，<code>$?</code> 对应该函数调用 return 命令返回的值。如果没有主动调用 return 命令，默认返回为 0。</li></ul></li></ul><h3 id="输入-输出重定向" tabindex="-1">输入/输出重定向 <a class="header-anchor" href="#输入-输出重定向" aria-label="Permalink to &quot;输入/输出重定向&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>command &gt; file</code></td><td style="text-align:left;">将输出重定向到 file</td></tr><tr><td style="text-align:left;"><code>command &lt; file</code></td><td style="text-align:left;">将输入重定向到 file</td></tr><tr><td style="text-align:left;"><code>command &gt;&gt; file</code></td><td style="text-align:left;">将输出以追加的方式重定向到 file</td></tr><tr><td style="text-align:left;"><code>n &gt; file</code></td><td style="text-align:left;">将文件描述符为 n 的文件重定向到 file</td></tr><tr><td style="text-align:left;"><code>n &gt;&gt; file</code></td><td style="text-align:left;">将文件描述符为 n 的文件以追加的方式重定向到 file</td></tr><tr><td style="text-align:left;"><code>n &gt;&amp; m</code></td><td style="text-align:left;">将输出文件 m 和 n 合并</td></tr><tr><td style="text-align:left;"><code>n &lt;&amp; m</code></td><td style="text-align:left;">将输入文件 m 和 n 合并</td></tr><tr><td style="text-align:left;"><code>&lt;&lt; tag</code></td><td style="text-align:left;">将开始标记 tag 和结束标记 tag 之间的内容作为输入</td></tr></tbody></table><blockquote><p>文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p></blockquote><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p><ul><li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li><li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li><li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。 默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。<br> 如果希望 stderr 重定向到 file，可以这样写：<code>command 2&gt;file</code><br> 如果希望 stderr 追加到 file 文件末尾，可以这样写：<code>command 2&gt;&gt;file</code><br><strong>2</strong> 表示标准错误文件(stderr)。<br> 如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span></span></code></pre></div><p>如果希望对 stdin 和 stdout 都重定向，可以这样写：<code>command &lt; file1 &gt;file2</code><br> command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。</p><p>/dev/null 文件</p><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：<code>command &gt; /dev/null</code><br> /dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到&quot;禁止输出&quot;的效果。<br> 如果希望屏蔽 stdout 和 stderr，可以这样写： <code>command &gt; /dev/null 2&gt;&amp;1</code></p><blockquote><p>注意：0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。这里的 2 和 &gt; 之间不可以有空格，2&gt; 是一体的时候才表示错误输出。</p></blockquote><h3 id="文件包含" tabindex="-1">文件包含 <a class="header-anchor" href="#文件包含" aria-label="Permalink to &quot;文件包含&quot;">​</a></h3><p>和其他语言一样，Shell 也可以包含外部脚本</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 注意点号(.)和文件名中间有一空格</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename</span></span></code></pre></div><blockquote><p>被包含的文件 filename 不需要可执行权限。</p></blockquote><h3 id="exit" tabindex="-1">exit <a class="header-anchor" href="#exit" aria-label="Permalink to &quot;exit&quot;">​</a></h3><p>When used in a shell script, the commands <code>exit 0</code> and <code>exit 1</code> indicate the success or failure of a command or script. Generally, <code>exit 0</code> is used to indicate successful completion, while <code>exit 1</code> is used to indicate an error or failure. It is important to note that the exit code is -1 if the script is terminated by a signal such as SIGINT or SIGKILL.</p><h2 id="qa" tabindex="-1">QA <a class="header-anchor" href="#qa" aria-label="Permalink to &quot;QA&quot;">​</a></h2><h3 id="bin-bash-m-bad-interpreter-no-such-file-or-directory" tabindex="-1">/bin/bash^M: bad interpreter: No such file or directory <a class="header-anchor" href="#bin-bash-m-bad-interpreter-no-such-file-or-directory" aria-label="Permalink to &quot;/bin/bash^M: bad interpreter: No such file or directory&quot;">​</a></h3><p>这个错误信息提示的问题是由于在 <code>build.sh</code> 脚本文件中包含了 Windows 风格的换行符（CR LF，即回车加换行），而 Linux 或 Unix 系统通常只识别 LF（换行符）作为行结束符。这里的 <code>^M</code> 是回车符（CR）在命令行中的表示方式。</p><p>要解决这个问题，你可以使用几种不同的方法来转换文件的换行符格式：</p><p>方法 1: 使用 <code>dos2unix</code> 工具</p><p>如果你的系统中安装了 <code>dos2unix</code> 工具，可以很方便地转换文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dos2unix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build.sh</span></span></code></pre></div><p>如果没有安装 <code>dos2unix</code>，你可以通过包管理器安装它。例如，在 Ubuntu 上，你可以使用：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dos2unix</span></span></code></pre></div><p>方法 2: 使用 <code>sed</code> 命令</p><p>如果你不想安装额外的工具，可以使用 <code>sed</code> 命令来删除回车符：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/\\r$//&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build.sh</span></span></code></pre></div><p>注意：在某些系统中（如 macOS），你可能需要使用 <code>sed -i &#39;&#39; &#39;s/\\r$//&#39; build.sh</code> 来避免 <code>-i</code> 选项后面直接跟空格。</p><p>方法 3: 使用 Vim 编辑器</p><p>如果你熟悉 Vim，可以在 Vim 中打开文件，然后使用 <code>:set ff=unix</code> 命令来设置文件格式为 Unix 格式，并保存退出。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build.sh</span></span></code></pre></div><p>在 Vim 中，输入 <code>:set ff=unix</code>，然后按 <code>:wq</code> 保存并退出。</p><p>方法 4: 使用 Notepad++（如果你是在 Windows 上编辑的）</p><p>如果你是在 Windows 上编辑文件，然后将其转移到 Linux 上，可以使用 Notepad++ 这类文本编辑器，它允许你保存文件时使用 Unix/Linux 风格的换行符。在 Notepad++ 中，可以通过“编辑”-&gt;“EOL 转换”-&gt;“UNIX/OSX 格式”来实现。</p><p>完成上述任何一种转换后，你的 <code>build.sh</code> 脚本应该就能在 Linux 或 Unix 系统上正常运行了。</p><h3 id="mkdir-err" tabindex="-1">mkdir err <a class="header-anchor" href="#mkdir-err" aria-label="Permalink to &quot;mkdir err&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {bin,lib,etc}</span></span></code></pre></div><p>execute this sh, <code>sh foo.sh</code>, 会创建一个名字为<code>{bin,lib,etc}</code>的文件夹。<br> sol: <code>chmod a+x foo.sh</code> then execute <code>./foo.sh</code></p><h3 id="zsh-权限不够解决方法" tabindex="-1">zsh: 权限不够解决方法 <a class="header-anchor" href="#zsh-权限不够解决方法" aria-label="Permalink to &quot;zsh: 权限不够解决方法&quot;">​</a></h3><blockquote><p><code>chmod u+x *.sh</code></p></blockquote><h3 id="ubuntu-linux-下-source、sh、bash、-执行脚本的区别是什么" tabindex="-1">ubuntu（linux）下 source、sh、bash、./ 执行脚本的区别是什么？ <a class="header-anchor" href="#ubuntu-linux-下-source、sh、bash、-执行脚本的区别是什么" aria-label="Permalink to &quot;ubuntu（linux）下 source、sh、bash、./ 执行脚本的区别是什么？&quot;">​</a></h3><h4 id="source命令用法" tabindex="-1"><code>source</code>命令用法 <a class="header-anchor" href="#source命令用法" aria-label="Permalink to &quot;\`source\`命令用法&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FileName</span></span></code></pre></div><p>作用:在当前 bash 环境下读取并执行 FileName 中的命令。该 filename 文件可以无 &quot;执行权限&quot;。<br> 注：该命令通常用命令 <code>.</code> 来替代。</p><h4 id="sh、bash的命令用法" tabindex="-1"><code>sh</code>、<code>bash</code>的命令用法 <a class="header-anchor" href="#sh、bash的命令用法" aria-label="Permalink to &quot;\`sh\`、\`bash\`的命令用法&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FileName</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">或</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FileName</span></span></code></pre></div><p>作用:打开一个子 shell 来读取并执行 FileName 中命令。该 filename 文件可以无 &quot;执行权限&quot;。<br> 注：运行一个shell脚本时会启动另一个命令解释器。</p><h4 id="的命令用法" tabindex="-1"><code>./</code>的命令用法 <a class="header-anchor" href="#的命令用法" aria-label="Permalink to &quot;\`./\`的命令用法&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./FileName</span></span></code></pre></div><p>作用: 打开一个子 shell 来读取并执行 FileName 中命令，该 filename 文件需要 &quot;执行权限&quot;。<br> 注：运行一个 shell 脚本时会启动另一个命令解释器。</p><h2 id="实践" tabindex="-1">实践 <a class="header-anchor" href="#实践" aria-label="Permalink to &quot;实践&quot;">​</a></h2><h3 id="控制台输出重定向" tabindex="-1">控制台输出重定向 <a class="header-anchor" href="#控制台输出重定向" aria-label="Permalink to &quot;控制台输出重定向&quot;">​</a></h3><p>默认情况下，<code>&gt;</code> 只重定向标准输出（stdout），而标准错误（stderr）仍然会显示在终端上。为了同时捕获标准输出和标准错误，你可以使用 <code>&amp;&gt;</code> 或者分别重定向它们</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> compile.log</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者在一些 shell 中可能需要使用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compile.log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 独立错误</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compile.log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compile.err</span></span></code></pre></div><p>当使用 <code>&gt;</code> 或 <code>&amp;&gt;</code> 进行重定向时，如果 compile.log 文件已存在，它会被自动替换。如果需要保留原有内容，请使用追加模式（<code>&gt;&gt;</code> 或 <code>&amp;&gt;&gt;</code>，如果可用）。</p><h3 id="遍历文件个数" tabindex="-1">遍历文件个数 <a class="header-anchor" href="#遍历文件个数" aria-label="Permalink to &quot;遍历文件个数&quot;">​</a></h3><p>遍历某个目录下所有文件的个数（包括子目录）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;^-&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span></span></code></pre></div><p>遍历某个目录下所有目录的个数（包括子目录）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;^d&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span></span></code></pre></div><h3 id="判断字符串包含关系" tabindex="-1">判断字符串包含关系 <a class="header-anchor" href="#判断字符串包含关系" aria-label="Permalink to &quot;判断字符串包含关系&quot;">​</a></h3><h4 id="grep" tabindex="-1">grep <a class="header-anchor" href="#grep" aria-label="Permalink to &quot;grep&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;long string&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $strA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strB</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;包含&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;不包含&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><h3 id="" tabindex="-1">=~ <a class="header-anchor" href="#" aria-label="Permalink to &quot;=~&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;long string&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ $strA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $strB ]]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;包含&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;不包含&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><h3 id="通配符" tabindex="-1">通配符 <a class="header-anchor" href="#通配符" aria-label="Permalink to &quot;通配符&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;long string&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ $A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;包含&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;不包含&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div>`,171)]))}const g=i(l,[["render",n]]);export{c as __pageData,g as default};
