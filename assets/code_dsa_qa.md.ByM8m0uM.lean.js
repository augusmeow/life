import{_ as e,c as r,a3 as h,o as t}from"./chunks/framework.DDs3IadZ.js";const q=JSON.parse('{"title":"QA","description":"","frontmatter":{},"headers":[],"relativePath":"code/dsa/qa.md","filePath":"code/dsa/qa.md","lastUpdated":1682242135000}'),o={name:"code/dsa/qa.md"};function l(i,a,d,n,s,c){return t(),r("div",null,a[0]||(a[0]=[h('<h1 id="qa" tabindex="-1">QA <a class="header-anchor" href="#qa" aria-label="Permalink to &quot;QA&quot;">​</a></h1><h2 id="实现-lru-算法-实现带有过期时间的-lru-算法-简述-lru-算法及其实现方式" tabindex="-1">实现 <code>LRU</code> 算法，实现带有过期时间的 <code>LRU</code> 算法，简述 <code>LRU</code> 算法及其实现方式 <a class="header-anchor" href="#实现-lru-算法-实现带有过期时间的-lru-算法-简述-lru-算法及其实现方式" aria-label="Permalink to &quot;实现 `LRU` 算法，实现带有过期时间的 `LRU` 算法，简述 `LRU` 算法及其实现方式&quot;">​</a></h2><blockquote><p><a href="https://www.bookstack.cn/read/fucking-algorithm/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97-LRU%E7%AE%97%E6%B3%95.md" target="_blank" rel="noreferrer">如何实现LRU算法</a></p></blockquote><h2 id="什么是排序算法中的稳定性" tabindex="-1">什么是排序算法中的稳定性？ <a class="header-anchor" href="#什么是排序算法中的稳定性" aria-label="Permalink to &quot;什么是排序算法中的稳定性？&quot;">​</a></h2><h2 id="实现快速排序" tabindex="-1">实现快速排序 <a class="header-anchor" href="#实现快速排序" aria-label="Permalink to &quot;实现快速排序&quot;">​</a></h2><h3 id="使用递归及非递归两种方式实现快速排序" tabindex="-1">使用递归及非递归两种方式实现快速排序 <a class="header-anchor" href="#使用递归及非递归两种方式实现快速排序" aria-label="Permalink to &quot;使用递归及非递归两种方式实现快速排序&quot;">​</a></h3><h3 id="快速排序的空间复杂度是多少-时间复杂度的最好最坏的情况是多少-有哪些优化方案" tabindex="-1">快速排序的空间复杂度是多少？时间复杂度的最好最坏的情况是多少，有哪些优化方案 <a class="header-anchor" href="#快速排序的空间复杂度是多少-时间复杂度的最好最坏的情况是多少-有哪些优化方案" aria-label="Permalink to &quot;快速排序的空间复杂度是多少？时间复杂度的最好最坏的情况是多少，有哪些优化方案&quot;">​</a></h3><h2 id="如何从一个数组输出随机数组-洗牌算法" tabindex="-1">如何从一个数组输出随机数组（洗牌算法） <a class="header-anchor" href="#如何从一个数组输出随机数组-洗牌算法" aria-label="Permalink to &quot;如何从一个数组输出随机数组（洗牌算法）&quot;">​</a></h2><h2 id="手写无锁队列" tabindex="-1">手写无锁队列 <a class="header-anchor" href="#手写无锁队列" aria-label="Permalink to &quot;手写无锁队列&quot;">​</a></h2><p>可以使用原子操作和内存屏障来保证线程安全</p><h2 id="如何实现大数运算" tabindex="-1">如何实现大数运算 <a class="header-anchor" href="#如何实现大数运算" aria-label="Permalink to &quot;如何实现大数运算&quot;">​</a></h2><h2 id="给定一个包含-40亿-个无符号整数的大型文件-使用最多-1g-内存-对此文件进行排序" tabindex="-1">给定一个包含 40亿 个无符号整数的大型文件，使用最多 1G 内存，对此文件进行排序 <a class="header-anchor" href="#给定一个包含-40亿-个无符号整数的大型文件-使用最多-1g-内存-对此文件进行排序" aria-label="Permalink to &quot;给定一个包含 40亿 个无符号整数的大型文件，使用最多 1G 内存，对此文件进行排序&quot;">​</a></h2><h2 id="_10亿个数中如何高效地找到最大的一个数以及最大的第-k-个数" tabindex="-1">10亿个数中如何高效地找到最大的一个数以及最大的第 K 个数 <a class="header-anchor" href="#_10亿个数中如何高效地找到最大的一个数以及最大的第-k-个数" aria-label="Permalink to &quot;10亿个数中如何高效地找到最大的一个数以及最大的第 K 个数&quot;">​</a></h2><h2 id="两个-10g-大小包含-url-数据的文件-最多使用-1g-内存-将这两个文件合并-并找到相同的-url" tabindex="-1">两个 10G 大小包含 URL 数据的文件，最多使用 1G 内存，将这两个文件合并，并找到相同的 URL <a class="header-anchor" href="#两个-10g-大小包含-url-数据的文件-最多使用-1g-内存-将这两个文件合并-并找到相同的-url" aria-label="Permalink to &quot;两个 10G 大小包含 URL 数据的文件，最多使用 1G 内存，将这两个文件合并，并找到相同的 URL&quot;">​</a></h2><h2 id="给定-100g-的-url-磁盘数据-使用最多-1g-内存-统计出现频率最高的-top-k-个-url" tabindex="-1">给定 100G 的 URL 磁盘数据，使用最多 1G 内存，统计出现频率最高的 Top K 个 URL <a class="header-anchor" href="#给定-100g-的-url-磁盘数据-使用最多-1g-内存-统计出现频率最高的-top-k-个-url" aria-label="Permalink to &quot;给定 100G 的 URL 磁盘数据，使用最多 1G 内存，统计出现频率最高的 Top K 个 URL&quot;">​</a></h2><h2 id="_10亿条数据包括-id-上线时间-下线时间-请绘制每一秒在线人数的曲线图" tabindex="-1">10亿条数据包括 id，上线时间，下线时间，请绘制每一秒在线人数的曲线图 <a class="header-anchor" href="#_10亿条数据包括-id-上线时间-下线时间-请绘制每一秒在线人数的曲线图" aria-label="Permalink to &quot;10亿条数据包括 id，上线时间，下线时间，请绘制每一秒在线人数的曲线图&quot;">​</a></h2><h2 id="两个文件包含无序的数字-数字的大小范围是0500w左右。如何求两个文件中的重复的数据" tabindex="-1">两个文件包含无序的数字，数字的大小范围是0500w左右。如何求两个文件中的重复的数据？ <a class="header-anchor" href="#两个文件包含无序的数字-数字的大小范围是0500w左右。如何求两个文件中的重复的数据" aria-label="Permalink to &quot;两个文件包含无序的数字，数字的大小范围是0500w左右。如何求两个文件中的重复的数据？&quot;">​</a></h2><h2 id="_1000-台机器-每台机器-1000个-文件-每个文件存储了-10亿个-整数-如何找到其中最小的-1000个-值" tabindex="-1">1000 台机器，每台机器 1000个 文件，每个文件存储了 10亿个 整数，如何找到其中最小的 1000个 值？ <a class="header-anchor" href="#_1000-台机器-每台机器-1000个-文件-每个文件存储了-10亿个-整数-如何找到其中最小的-1000个-值" aria-label="Permalink to &quot;1000 台机器，每台机器 1000个 文件，每个文件存储了 10亿个 整数，如何找到其中最小的 1000个 值？&quot;">​</a></h2><h2 id="如何随机生成不重复的-10个100-以内的数字" tabindex="-1">如何随机生成不重复的 10个100 以内的数字？ <a class="header-anchor" href="#如何随机生成不重复的-10个100-以内的数字" aria-label="Permalink to &quot;如何随机生成不重复的 10个100 以内的数字？&quot;">​</a></h2><h2 id="如何通过一个不均匀的硬币得到公平的结果" tabindex="-1">如何通过一个不均匀的硬币得到公平的结果？ <a class="header-anchor" href="#如何通过一个不均匀的硬币得到公平的结果" aria-label="Permalink to &quot;如何通过一个不均匀的硬币得到公平的结果？&quot;">​</a></h2><h2 id="常用的限流算法有哪些-简述令牌桶算法原理" tabindex="-1">常用的限流算法有哪些？简述令牌桶算法原理 <a class="header-anchor" href="#常用的限流算法有哪些-简述令牌桶算法原理" aria-label="Permalink to &quot;常用的限流算法有哪些？简述令牌桶算法原理&quot;">​</a></h2><h2 id="简述布隆过滤器原理及其使用场景" tabindex="-1">简述布隆过滤器原理及其使用场景 <a class="header-anchor" href="#简述布隆过滤器原理及其使用场景" aria-label="Permalink to &quot;简述布隆过滤器原理及其使用场景&quot;">​</a></h2><h2 id="hash-表常见操作的时间复杂度是多少-遇到-hash-冲突是如何解决的" tabindex="-1">Hash 表常见操作的时间复杂度是多少？遇到 Hash 冲突是如何解决的？ <a class="header-anchor" href="#hash-表常见操作的时间复杂度是多少-遇到-hash-冲突是如何解决的" aria-label="Permalink to &quot;Hash 表常见操作的时间复杂度是多少？遇到 Hash 冲突是如何解决的？&quot;">​</a></h2><h2 id="什么是跳表" tabindex="-1">什么是跳表 <a class="header-anchor" href="#什么是跳表" aria-label="Permalink to &quot;什么是跳表&quot;">​</a></h2><h2 id="一个两层的跳表查询时可以降低倒多大的复杂度" tabindex="-1">一个两层的跳表查询时可以降低倒多大的复杂度 <a class="header-anchor" href="#一个两层的跳表查询时可以降低倒多大的复杂度" aria-label="Permalink to &quot;一个两层的跳表查询时可以降低倒多大的复杂度&quot;">​</a></h2><h2 id="如何计算循环链表的长度" tabindex="-1">如何计算循环链表的长度 <a class="header-anchor" href="#如何计算循环链表的长度" aria-label="Permalink to &quot;如何计算循环链表的长度&quot;">​</a></h2><h2 id="求字符串最长不重复字串-不能用任何数据结构" tabindex="-1">求字符串最长不重复字串，不能用任何数据结构 <a class="header-anchor" href="#求字符串最长不重复字串-不能用任何数据结构" aria-label="Permalink to &quot;求字符串最长不重复字串，不能用任何数据结构&quot;">​</a></h2>',27)]))}const b=e(o,[["render",l]]);export{q as __pageData,b as default};
