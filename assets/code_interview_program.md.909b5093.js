import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.1cc28bed.js";const h=JSON.parse('{"title":"程序设计","description":"","frontmatter":{},"headers":[],"relativePath":"code/interview/program.md","filePath":"code/interview/program.md","lastUpdated":1682241312000}'),p={name:"code/interview/program.md"},o=l(`<h1 id="程序设计" tabindex="-1">程序设计 <a class="header-anchor" href="#程序设计" aria-label="Permalink to &quot;程序设计&quot;">​</a></h1><h2 id="如何删除单向链表的中间节点" tabindex="-1">如何删除单向链表的中间节点 <a class="header-anchor" href="#如何删除单向链表的中间节点" aria-label="Permalink to &quot;如何删除单向链表的中间节点&quot;">​</a></h2><p>要删除单向链表中间的节点，需要找到链表的中间节点，并修改前一个节点的指向，即跳过中间节点，再将中间节点从内存中释放。</p><p>以下是一个Python实现的例子：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, val</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, next</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteNode</span><span style="color:#E1E4E8;">(head: ListNode) -&gt; ListNode:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 如果链表为空或者只有一个节点，直接返回head</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> head </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> head.next </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> head</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 使用快慢指针找到中间节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    slow, fast </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head, head.next</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> fast </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> fast.next </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        slow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slow.next</span></span>
<span class="line"><span style="color:#E1E4E8;">        fast </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fast.next.next</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 删除中间节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    slow.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slow.next.next</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> head</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, val</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, next</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteNode</span><span style="color:#24292E;">(head: ListNode) -&gt; ListNode:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 如果链表为空或者只有一个节点，直接返回head</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> head </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> head.next </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 使用快慢指针找到中间节点</span></span>
<span class="line"><span style="color:#24292E;">    slow, fast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head, head.next</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> fast </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> fast.next </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        slow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slow.next</span></span>
<span class="line"><span style="color:#24292E;">        fast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fast.next.next</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 删除中间节点</span></span>
<span class="line"><span style="color:#24292E;">    slow.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slow.next.next</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head</span></span></code></pre></div><p>在上面的实现中，我们使用了两个指针，一个指针每次走一步，另一个指针每次走两步，当快指针走到链表末尾时，慢指针就会到达链表中间，然后我们就可以删除中间节点。最后返回头节点即可。</p>`,6),e=[o];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const _=s(p,[["render",t]]);export{h as __pageData,_ as default};
