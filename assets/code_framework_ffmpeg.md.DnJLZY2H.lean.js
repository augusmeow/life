import{_ as i,c as a,a3 as p,o as t}from"./chunks/framework.DDs3IadZ.js";const r=JSON.parse('{"title":"FFmpeg","description":"","frontmatter":{},"headers":[],"relativePath":"code/framework/ffmpeg.md","filePath":"code/framework/ffmpeg.md","lastUpdated":1722500930000}'),e={name:"code/framework/ffmpeg.md"};function h(n,s,l,k,d,F){return t(),a("div",null,s[0]||(s[0]=[p(`<h1 id="ffmpeg" tabindex="-1">FFmpeg <a class="header-anchor" href="#ffmpeg" aria-label="Permalink to &quot;FFmpeg&quot;">​</a></h1><h2 id="视频分割、合并" tabindex="-1">视频分割、合并 <a class="header-anchor" href="#视频分割、合并" aria-label="Permalink to &quot;视频分割、合并&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将一个视频分割为 两个视频</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input_video.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 00:02:30</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output_part1.mp4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input_video.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 00:02:30</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output_part2.mp4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 01:30:00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 00:30:00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.mp4</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将四个视频合并为 一个视频 注意添加线程数 防止电脑死机</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -filter_complex</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;concat=n=4:v=1:a=1&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -threads</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.mp4</span></span></code></pre></div><p>实测 AMD R7-3800X 8Core16Thread 在不加 threads 的情况下，会直接死机</p><h2 id="提取图片" tabindex="-1">提取图片 <a class="header-anchor" href="#提取图片" aria-label="Permalink to &quot;提取图片&quot;">​</a></h2><p>为了使用FFmpeg从视频中提取照片，你需要首先确保你的系统上安装了FFmpeg。以下是如何使用FFmpeg从视频中提取单帧为图像的基本命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input_video.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 00:00:10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -frames:v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output_image.png</span></span></code></pre></div><p>这里是命令参数的简要解释：</p><ul><li><code>-i input_video.mp4</code>: 指定输入文件，这里是你的视频文件。</li><li><code>-ss 00:00:10</code>: 指定从视频的具体时间码开始抓取帧。这个例子中是从视频开始的第10秒处获取。</li><li><code>-frames:v 1</code>: 表示你要从这个时间码开始提取的视频帧的数量，这里我们设置为 1，即提取单一的帧作为图像。</li><li><code>output_image.png</code>: 是输出文件的名字和格式。</li></ul><p>如果你想要从视频中提取多个图片，改变 <code>-frames:v</code> 参数的值或使用其他方法如指定一个频率 <code>-vf &quot;fps=1&quot;</code> 来每秒提取一帧。</p><p>请注意，这个命令提取的单帧将会根据你提供的准确时间戳来选择，并且输出文件的格式可以是你选择的任何FFmpeg支持的图片格式，如 JPG, PNG 等。</p><p>确保替换 <code>input_video.mp4</code> 和 <code>output_image.png</code> 为你自己的视频文件名和希望保存的图像文件名。</p><h3 id="提取所有图片" tabindex="-1">提取所有图片 <a class="header-anchor" href="#提取所有图片" aria-label="Permalink to &quot;提取所有图片&quot;">​</a></h3><p>要使用FFmpeg将视频中的全部帧提取为图片，你可以使用FFmpeg的命令行工具。以下是一个基本的命令示例，它会把视频中的每一帧都保存为一张图片（通常是JPEG或PNG格式）。</p><h4 id="提取为jpeg图片" tabindex="-1">提取为JPEG图片 <a class="header-anchor" href="#提取为jpeg图片" aria-label="Permalink to &quot;提取为JPEG图片&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fps=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output%d.jpg</span></span></code></pre></div><p>但上面的命令实际上并不总是按照视频的实际帧率来提取每一帧（除非你设置的<code>fps</code>值与视频的实际帧率相匹配）。如果你想要确保提取视频中的<strong>每一帧</strong>，应该省略<code>-vf fps=1</code>部分，因为这会限制FFmpeg输出的帧率。</p><p><strong>正确的命令</strong>（提取视频中的每一帧为JPEG图片）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -qscale:v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output%d.jpg</span></span></code></pre></div><p>这里，<code>-qscale:v 2</code>是用来设置输出JPEG图片的质量的（范围从1（最好）到31（最差），但并非所有编解码器都遵循这个范围）。注意，这个参数可能会根据你的FFmpeg版本和编译选项有所不同。对于新版本的FFmpeg，你可能需要使用<code>-q:v</code>代替<code>-qscale:v</code>。</p><h4 id="提取为png图片" tabindex="-1">提取为PNG图片 <a class="header-anchor" href="#提取为png图片" aria-label="Permalink to &quot;提取为PNG图片&quot;">​</a></h4><p>PNG是一种无损格式，适合需要高质量图像的场景。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fps=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output%d.png</span></span></code></pre></div><p>但同样，如果你想要提取<strong>每一帧</strong>，应省略<code>-vf fps=1</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.mp4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output%d.png</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><ul><li><code>%d</code>是一个占位符，FFmpeg会自动用帧的序号替换它。</li><li>根据你的视频长度和分辨率，这将生成大量的图片文件，可能会占用大量磁盘空间。</li><li>如果你的视频有音频轨道，FFmpeg会忽略它，因为只关注视频帧。</li><li>提取的帧速率（FPS）和视频的实际帧率可能不同，除非你特别指定了<code>-vf fps=原视频帧率</code>（但通常很难知道确切的帧率，除非你已经知道了）。</li><li>某些编解码器或视频格式可能不支持直接提取每一帧，但大多数情况下，上述命令应该工作得很好。</li></ul></div><h2 id="查看视频详细信息" tabindex="-1">查看视频详细信息 <a class="header-anchor" href="#查看视频详细信息" aria-label="Permalink to &quot;查看视频详细信息&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your_video.mp4</span></span></code></pre></div>`,28)]))}const g=i(e,[["render",h]]);export{r as __pageData,g as default};
