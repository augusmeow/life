import{_ as o,c as l,a3 as e,j as a,a as s,o as n}from"./chunks/framework.DDs3IadZ.js";const f=JSON.parse('{"title":"PAXOS","description":"","frontmatter":{},"headers":[],"relativePath":"code/program/distributed/paxos.md","filePath":"code/program/distributed/paxos.md","lastUpdated":1709781993000}'),i={name:"code/program/distributed/paxos.md"},Q={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},r={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.781ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.461ex",height:"2.765ex",role:"img",focusable:"false",viewBox:"0 -877 5949.9 1222","aria-hidden":"true"},p={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},d={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.781ex"},xmlns:"http://www.w3.org/2000/svg",width:"25.694ex",height:"2.765ex",role:"img",focusable:"false",viewBox:"0 -877 11356.6 1222","aria-hidden":"true"},T={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},m={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.781ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.461ex",height:"2.774ex",role:"img",focusable:"false",viewBox:"0 -880.9 1971.6 1225.9","aria-hidden":"true"};function h(c,t,g,u,x,b){return n(),l("div",null,[t[11]||(t[11]=e(`<h1 id="paxos" tabindex="-1">PAXOS <a class="header-anchor" href="#paxos" aria-label="Permalink to &quot;PAXOS&quot;">​</a></h1><blockquote><p>总结自<a href="https://blog.openacid.com/algo/paxos/" target="_blank" rel="noreferrer">paxos</a></p></blockquote><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><h3 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么&quot;">​</a></h3><p>在分布式系统中保证多副本数据强一致的算法.</p><h3 id="有什么用" tabindex="-1">有什么用 <a class="header-anchor" href="#有什么用" aria-label="Permalink to &quot;有什么用&quot;">​</a></h3><ul><li>没有paxos的一堆机器, 叫做分布式;</li><li>有paxos协同的一堆机器, 叫分布式系统.</li></ul><h2 id="分布式系统要解决的问题" tabindex="-1">分布式系统要解决的问题 <a class="header-anchor" href="#分布式系统要解决的问题" aria-label="Permalink to &quot;分布式系统要解决的问题&quot;">​</a></h2><h3 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p>多个节点一起完成一件事情。<br> 分布式中唯一的问题：对某事保持一致。<br> Paxos：分布式系统的核心算法。</p><p>paxos的工作, 就是把一堆运行的机器协同起来, 让多个机器成为一个整体系统. 在这个系统中, 每个机器都必须让系统中的状态达成一致, 例如三副本集群如果一个机器上上传了一张图片, 那么另外2台机器上也必须复制这张图片过来, 整个系统才处于一个一致的状态.</p><h3 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h3><p>分布式系统的一致性问题最终都归结为分布式存储的一致性. 像aws的对象存储可靠性要求是9~13个9. 而这么高的可靠性都是建立在可靠性没那么高的硬件上的.</p><p>对系统的需求：持久性要达到 99.99999999%<br> 我们可以用的基础设施：</p><ul><li>磁盘: 4%年损坏率</li><li>服务器宕机时间：0.1%或者更长</li><li>IDC间丢包率：5% ~ 30%</li></ul><h3 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h3><p>几乎所有的分布式存储(甚至单机系统, 参考EC第一篇:<a href="https://blog.openacid.com/storage/ec-1" target="_blank" rel="noreferrer">原理</a>, EC第二篇:<a href="https://blog.openacid.com/storage/ec-2" target="_blank" rel="noreferrer">实现</a>, EC第三篇:<a href="https://blog.openacid.com/storage/ec-3" target="_blank" rel="noreferrer">极限</a>) 都必须用某种冗余的方式在廉价硬件的基础上搭建高可靠的存储. 而冗余的基础就是多副本策略, 一份数据存多份. 多副本保证了可靠性, 而副本之间的一致, 就需要paxos这类分布式一致性算法来保证.</p><p>(可能的解决方案)<br> 多副本：x&lt;n个副本损坏不会丢失数据<br> 多副本的数据丢失风险：</p><ul><li>1 副本：~ 0.63%</li><li>2 副本：~ 0.00395%</li><li>3 副本：&lt; 0.000001%</li><li>n 副本：~ x^n //x单副本损坏率</li></ul><p>如何实施复制？</p><h2 id="不太完美的复制策略" tabindex="-1">不太完美的复制策略 <a class="header-anchor" href="#不太完美的复制策略" aria-label="Permalink to &quot;不太完美的复制策略&quot;">​</a></h2><p><strong>复制算法</strong></p><ul><li>主从异步复制</li><li>主从同步复制</li><li>主从半同步复制</li><li>多数派写(读)</li></ul><h3 id="主从异步复制" tabindex="-1">主从异步复制 <a class="header-anchor" href="#主从异步复制" aria-label="Permalink to &quot;主从异步复制&quot;">​</a></h3><p><strong>主从异步复制</strong>是最简单的策略之一, 它很容易实现, 但存在一个问题: 客户端收到一个数据已经安全(OK)的信息, 跟数据真正安全( 数据复制到全部的机器上)在时间上有一个空隙, 这段时间负责接收客户端请求的那个机器(master)如果被闪电击中或被陨石砸到或被打扫卫生的大姐踢断了电源, 那数据就可能会丢失. 因此它不是一个可靠的复制策略(使用主从异步复制要求你必须相信宇宙中不存在闪电陨石和扫地大姐).</p><p>如Mysql的binlog的复制</p><ol><li>主接到写请求</li><li>主写入本磁盘</li><li>主应答ok</li><li>主复制数据到从库</li></ol><p>如果磁盘在复制前损坏：数据丢失</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>autonumber</span></span>
<span class="line"><span>Client -&gt;&gt; Master: </span></span>
<span class="line"><span>Master -&gt;&gt; Client: </span></span>
<span class="line"><span>Note over Master: Disk Failure</span></span>
<span class="line"><span>Master--&gt;&gt;Slave.1: </span></span>
<span class="line"><span>Slave.1--&gt;&gt;Master: </span></span>
<span class="line"><span>Master--&gt;&gt;Slave.2: </span></span>
<span class="line"><span>Slave.2--&gt;&gt;Master:</span></span></code></pre></div><h3 id="主从同步复制" tabindex="-1">主从同步复制 <a class="header-anchor" href="#主从同步复制" aria-label="Permalink to &quot;主从同步复制&quot;">​</a></h3><p>跟主从异步复制相比, <strong>主从同步复制</strong>提供了完整的可靠性: 直到数据真的安全的复制到全部的机器上之后, master才告知客户端数据已经安全.</p><p>但主从同步复制有个致命的缺点就是整个系统中有任何一个机器宕机, 写入就进行不下去了. 相当于系统的可用性随着副本数量指数降低.</p><ol><li>主接到写请求</li><li>主复制日志到从库</li><li>从库此时阻塞</li><li>客户端一直在等待ok，直到所有从库返回</li></ol><p>一个失联节点造成整个系统不可用。</p><ul><li>没有数据丢失</li><li>可用性降低</li></ul><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>autonumber</span></span>
<span class="line"><span>Client -&gt;&gt; Master: </span></span>
<span class="line"><span>Master-&gt;&gt;Slave.1: </span></span>
<span class="line"><span>Master-&gt;&gt;Slave.2: </span></span>
<span class="line"><span>Slave.1--&gt;&gt;Master: </span></span>
<span class="line"><span>Slave.2--&gt;&gt;Master: BLOCK</span></span>
<span class="line"><span>Master --&gt;&gt; Client:</span></span></code></pre></div><h3 id="半同步复制" tabindex="-1">半同步复制 <a class="header-anchor" href="#半同步复制" aria-label="Permalink to &quot;半同步复制&quot;">​</a></h3><p>在同步和异步之间, 做一个折中, 看起来是一个不错的方案. 这就是<strong>半同步复制</strong>. 它要求master在应答客户端之前必须把数据复制到足够多的机器上, 但不需要是全部. 这样副本数够多可以提供比较高的可靠性; 1台机器宕机也不会让整个系统停止写入.</p><p>但是它还是不完美, 例如数据a复制到slave-1, 但没有到达slave-2; 数据b复制达到了slave-2但没有到达slave-1, 这时如果master挂掉了需要从某个slave恢复出数据, 任何一个slave都不能提供完整的数据. 所以在整个系统中, 数据存在某种不一致.</p><ol><li>主接到写请求</li><li>主复制日志到从库</li><li>从库此时阻塞</li><li>如果1&lt;=x&lt;=n个从库返回ok，则客户端ok</li></ol><ul><li>高可靠性</li><li>高可用性</li><li>可能任何从库都不完整</li></ul><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>autonumber</span></span>
<span class="line"><span>Client -&gt;&gt; Master: </span></span>
<span class="line"><span>Master-&gt;&gt;Slave.1: </span></span>
<span class="line"><span>Master-&gt;&gt;Slave.2: </span></span>
<span class="line"><span>Slave.1-&gt;&gt;Master: </span></span>
<span class="line"><span>Master -&gt;&gt; Client: </span></span>
<span class="line"><span>Slave.2--&gt;&gt;Master:</span></span></code></pre></div><h3 id="多数派读写" tabindex="-1">多数派读写 <a class="header-anchor" href="#多数派读写" aria-label="Permalink to &quot;多数派读写&quot;">​</a></h3><p>为了解决半同步复制中数据不一致的问题, 可以将这个复制策略再做一改进: <strong>多数派读写</strong>: 每条数据必须写入到半数以上的机器上. 每次读取数据都必须检查半数以上的机器上是否有这条数据.</p><p>在这种策略下, 数据可靠性足够, 宕机容忍足够, 任一机器故障也能读到全部数据.</p><p>Dynamo/Cassandra</p>`,46)),a("ul",null,[a("li",null,[t[2]||(t[2]=s("客户端写入")),a("mjx-container",Q,[(n(),l("svg",r,t[0]||(t[0]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1325.8,0)"><g data-mml-node="text"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" style="stroke-width:3;"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mfrac" transform="translate(3159.6,0)"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(357.2,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><rect width="827.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4449.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(5449.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1)]))),t[1]||(t[1]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mi",null,"W"),a("mo",null,">="),a("mfrac",null,[a("mi",null,"N"),a("mn",null,"2")]),a("mo",null,"+"),a("mn",null,"1")])],-1))]),t[3]||(t[3]=s("个节点"))]),t[4]||(t[4]=a("li",null,"不需要主",-1))]),a("p",null,[a("mjx-container",p,[(n(),l("svg",d,t[5]||(t[5]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1270.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2270.4,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(3307.2,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4363,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(5251,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5695.7,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(6732.4,0)"><g data-mml-node="text"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" style="stroke-width:3;"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mfrac" transform="translate(8566.2,0)"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(357.2,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><rect width="827.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(9856.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(10856.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1)]))),t[6]||(t[6]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mi",null,"W"),a("mo",null,"+"),a("mi",null,"R"),a("mo",null,">"),a("mi",null,"N"),a("mo",null,";"),a("mi",null,"R"),a("mo",null,">="),a("mfrac",null,[a("mi",null,"N"),a("mn",null,"2")]),a("mo",null,"+"),a("mn",null,"1")])],-1))])]),a("p",null,[t[9]||(t[9]=s("容忍最多")),a("mjx-container",T,[(n(),l("svg",m,t[7]||(t[7]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,398) scale(0.707)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1666,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mn" transform="translate(809,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><rect width="1731.6" height="60" x="120" y="220"></rect></g></g></g>',1)]))),t[8]||(t[8]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mfrac",null,[a("mrow",null,[a("mi",null,"N"),a("mo",null,"−"),a("mn",null,"1")]),a("mn",null,"2")])])],-1))]),t[10]||(t[10]=s("个节点损坏"))]),t[12]||(t[12]=e(`<div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>autonumber</span></span>
<span class="line"><span>Client -&gt;&gt; Node.1: </span></span>
<span class="line"><span>Client -&gt;&gt; Node.2: </span></span>
<span class="line"><span>Client -&gt;&gt; Node.3: </span></span>
<span class="line"><span>Node.1-&gt;&gt;Client: </span></span>
<span class="line"><span>Node.2-&gt;&gt;Client: </span></span>
<span class="line"><span>Node.3--&gt;&gt;Client:</span></span></code></pre></div><p>多数派读写的策略也有个但是, 就是对于一条数据的更新时, 会产生不一致的状态. 例如:</p><p>node-1, node-2都写入了a=x, 下一次更新时node-2, node-3写入了a=y. 这时, 一个要进行读取a的客户端如果联系到了node-1和node-2, 它将看到2条不同的数据.</p><p>为了不产生歧义, 多数派读写还必须给每笔写入增加一个全局递增的时间戳. 更大时间戳的记录如果被看见, 就应该忽略小时间戳的记录. 这样在读取过程中, 客户端就会看到a=x₁, a=y₂ 这2条数据, 通过比较时间戳1和2, 发现y是更新的数据, 所以忽略a=x₁. 这样保证多次更新一条数据不产生歧义.</p><p><strong>后写入优胜</strong></p><ul><li><p>最后一次写入覆盖先前写入</p></li><li><p>所有写入操作需要一个全局顺序，时间戳</p></li><li><p>高可靠性</p></li><li><p>高可用性</p></li><li><p>数据完整性有保证</p></li></ul><p>是的, 但是又来了. 这种带时间戳的多数派读写依然有问题. 就是在客户端没有完成一次完整的多数派写的时候: 例如, 上面的例子中写入, a=x₁写入了node-1和node-2, a=y₂时只有node-3 写成功了, 然后客户端进程就挂掉了, 留下系统中的状态如下:</p><p>node-1: a=x₁<br> node-2: a=x₁<br> node-3: a=y₂</p><p>这时另一个读取的客户端来了,</p><ul><li>如果它联系到node-1和node-2, 那它得到的结果是a=x₁.</li><li>如果它联系到node-2和node-3, 那它得到的结果是a=y₂.</li></ul><p>整个系统对外部提供的信息仍然是不一致的.</p><p><strong>paxos中通过2次原本并不严谨的多数派读写, 实现了严谨的强一致consensus算法.</strong></p><p><strong>W + R &gt; N</strong></p><p>一致性：</p><ul><li>最终一致性</li></ul><p>事务性：</p><ul><li>非原子更新</li><li>脏读</li><li>更新丢失问题</li></ul><p><a href="https://en.wikipedia.org/wiki/Concurrency_control" target="_blank" rel="noreferrer">https://en.wikipedia.org/wiki/Concurrency_control</a></p><h2 id="从多数派读写到paxos的推导" tabindex="-1">从多数派读写到paxos的推导 <a class="header-anchor" href="#从多数派读写到paxos的推导" aria-label="Permalink to &quot;从多数派读写到paxos的推导&quot;">​</a></h2><p>一个假想存储服务</p><ul><li>一个有3个存储节点的存储服务集群</li><li>使用多数派读写的策略</li><li>只存储一个变量<code>i</code></li><li><code>i</code>的每次更新对应有多个版本：<code>i1</code>,<code>i2</code>,<code>i3</code>...</li><li>这个存储系统支持3个命令 <ul><li><code>get</code>：读最新的<code>i</code></li><li><code>set&lt;n&gt;</code>：设置下个版本的<code>i</code>的值为<code>&lt;n&gt;</code></li><li><code>inc&lt;n&gt;</code>：对<code>i</code>加<code>&lt;n&gt;</code>，也生成1个新版本</li></ul></li></ul><p>命令实现</p><ul><li><code>set</code>：直接对应多数派写</li><li><code>inc</code>：(最简单的事务型操作)</li></ul><p><img src="https://user-images.githubusercontent.com/34206897/180978809-4ba6957c-be2d-4b9d-a9d6-e2a12175c48e.png" alt="image"></p><p>问题: 如果有2个并发的客户端进程同时做这个inc的操作, 在多数派读写的实现中, 必然会产生一个Y客户端覆盖X客户端的问题. 从而产生了数据更新点的丢失.</p><p>而paxos就是为了解决这类问题提出的, 它需要让Y能检测到这种并发冲突, 进而采取措施避免更新丢失</p><p><img src="https://user-images.githubusercontent.com/34206897/180979165-328339f6-6d24-4b02-a114-012bab93dd7d.jpg" alt="1c9a7e01b88e4cdc9cf99061d5a78ed"></p><p>提取一下上面提到的问题: 让Y去更新的时候不能直接更新i₂, 而是应该能检测到i₂的存在, 进而将自己的结果保存在下一个版本i₃中, 再写回系统中.</p><p>而这个问题可以转化成: i的每个版本只能被写入一次, 不允许修改. 如果系统设计能满足这个要求, 那么X和Y的inc操作就都可以正确被执行了.</p><p>于是我们的问题就转化成一个更简单, 更基础的问题: 如何确定一个值(例如iⱼ)已经被写入了.</p><p>直观来看, 解决方法也很简单, 在X或Y写之前先做一次多数派读, 以便确认是否有其他客户端进程已经在写了, 如果有, 则放弃.</p>`,31))])}const w=o(i,[["render",h]]);export{f as __pageData,w as default};
